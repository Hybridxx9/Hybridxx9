import logging
import asyncio
import time
import os
import csv
import traceback
import openpyxl
from urllib.parse import urlencode
from openpyxl.styles import Font, Alignment, PatternFill
from openpyxl.utils import get_column_letter
from datetime import datetime
from dotenv import load_dotenv
from io import BytesIO, StringIO
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import aiohttp
import json

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# ==== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò–ó –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ====
API_TOKEN = os.getenv("BOT_TOKEN", "8342338980:AAFqW9vU1pT0Rwa8y7Z7vL0yiJ6nD99dHNQ")
ADMIN_ID = int(os.getenv("ADMIN_ID", "436919904"))

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
allowed_users_str = os.getenv("ALLOWED_USERS", "")
ALLOWED_USERS = [int(user_id.strip()) for user_id in allowed_users_str.split(",") if user_id.strip()]
# –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø—É—Å—Ç–æ
if not ALLOWED_USERS:
    ALLOWED_USERS = [436919904, 8153905248, 438098732]
# –î–æ–±–∞–≤–ª—è–µ–º ADMIN_ID –≤ —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
if ADMIN_ID not in ALLOWED_USERS:
    ALLOWED_USERS.append(ADMIN_ID)

ETHERSCAN_API_KEY = os.getenv("ETHERSCAN_API_KEY", "46N2KJPSTIUJ43TKT7IR23YKGZ35WRAEST")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
if not API_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
if not ADMIN_ID:
    raise ValueError("ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
if not ETHERSCAN_API_KEY:
    raise ValueError("ETHERSCAN_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤
USDC_CONTRACT_BASE = "0x833589fCD6eDb6E08f4c7c32D4f71b54bdA02913"
USDC_CONTRACT_ARBITRUM = "0xaf88d065e77c8cC2239327C5EDb3A432268e5831" 
USDC_CONTRACT_OPTIMISM = "0x0b2C639c533813f4Aa9D7837CAf62653d097Ff85"

ETH_CONTRACT = "0x0000000000000000000000000000000000000000"

# API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –ï–î–ò–ù–´–ô ENDPOINT
ETHERSCAN_V2_API_URL = "https://api.etherscan.io/v2/api"

# Basescan API
BASESCAN_API_URL = "https://api.basescan.org/api"

BASE_RPC_URL = "https://mainnet.base.org"

# Chain IDs
BASE_CHAIN_ID = 8453
ARBITRUM_CHAIN_ID = 42161  
OPTIMISM_CHAIN_ID = 10

# RPC URLs
BASE_RPC_URL = "https://mainnet.base.org"
ARBITRUM_RPC_URL = "https://arb1.arbitrum.io/rpc"

# –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–µ—Ç–µ–π
NETWORK_PRIORITY = [
    {"name": "Base", "chain_id": BASE_CHAIN_ID, "usdc_contract": USDC_CONTRACT_BASE},
    {"name": "Arbitrum", "chain_id": ARBITRUM_CHAIN_ID, "usdc_contract": USDC_CONTRACT_ARBITRUM},
    {"name": "Optimism", "chain_id": OPTIMISM_CHAIN_ID, "usdc_contract": USDC_CONTRACT_OPTIMISM}
]

# ========== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ==========
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AnalyzeState(StatesGroup):
    waiting_for_contract = State()
    waiting_for_mode = State()
    waiting_for_token = State()
    waiting_for_network = State()

class AllowanceState(StatesGroup):
    waiting_for_source = State()
    waiting_for_wallets = State()
    waiting_for_token_allowance = State()
    waiting_for_spender = State()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
contract_analysis_results = {}
user_sessions = {}
last_user_sessions = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö allowance
current_allowance_data = {}

# ========== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========

def get_admin_menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞")],
            [KeyboardButton(text="üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ allowance")],
            [KeyboardButton(text="üõ†Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")]
        ],
        resize_keyboard=True,
        persistent=True
    )

def get_network_selection_keyboard_allowance():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ allowance"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîµ Base", callback_data="allowance_network_base")],
        [InlineKeyboardButton(text="üî∑ Arbitrum", callback_data="allowance_network_arbitrum")],
        [InlineKeyboardButton(text="üü† Optimism", callback_data="allowance_network_optimism")],
        [InlineKeyboardButton(text="üåê –í—Å–µ —Å–µ—Ç–∏", callback_data="allowance_network_all")]
    ])

def get_analysis_mode_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –û–¥–Ω–∞ —Å–µ—Ç—å", callback_data="mode_single")],
        [InlineKeyboardButton(text="üåê –í—Å–µ —Å–µ—Ç–∏", callback_data="mode_all")]
    ])

def get_token_selection_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíô USDC", callback_data="token_usdc")],
        [InlineKeyboardButton(text="üî∑ ETH (‚ùå–ù–ï –î–õ–Ø allowance ‚ùå )", callback_data="token_eth")]
    ])

def get_network_selection_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîµ Base", callback_data="network_base")],
        [InlineKeyboardButton(text="üî∑ Arbitrum", callback_data="network_arbitrum")],
        [InlineKeyboardButton(text="üü† Optimism", callback_data="network_optimism")]
    ])

def get_allowance_source_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞", callback_data="source_analysis")],
        [InlineKeyboardButton(text="üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫", callback_data="source_upload")]
    ])

# ========== –£–¢–ò–õ–ò–¢–´ –î–õ–Ø API ==========

async def make_etherscan_request(chain_id, params):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Etherscan V2 API - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º chainid –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        params['chainid'] = chain_id
        params['apikey'] = ETHERSCAN_API_KEY
        
        # –ë–∞–∑–æ–≤—ã–π URL –±–µ–∑ chainid
        api_url = "https://api.etherscan.io/v2/api"
        
        logger.info(f"üîß V2 API Request: {api_url}, params={params}")
        
        async with aiohttp.ClientSession() as session:
            async with session.get(api_url, params=params, timeout=30) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    logger.info(f"üîß V2 API Response: status={data.get('status')}, message={data.get('message')}, result={data.get('result')}")
                    
                    if data.get('status') == '1' or data.get('message') == 'OK':
                        return data
                    else:
                        logger.error(f"‚ùå API Error: {data.get('message')}")
                        return None
                else:
                    logger.error(f"‚ùå HTTP Error: {response.status}")
                    return None
    except Exception as e:
        logger.error(f"‚ùå API Request Error: {e}")
        return None

async def make_basescan_request(params):
    """–ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Etherscan V2 API –¥–ª—è Base —Å–µ—Ç–∏"""
    try:
        params['chainid'] = BASE_CHAIN_ID
        params['apikey'] = ETHERSCAN_API_KEY
        
        api_url = "https://api.etherscan.io/v2/api"
        
        logger.info(f"üîß [BASESCAN_V2] Request: {api_url}, params={params}")
        
        async with aiohttp.ClientSession() as session:
            async with session.get(api_url, params=params, timeout=30) as response:
                if response.status == 200:
                    data = await response.json()
                    logger.info(f"üîß [BASESCAN_V2] Response: status={data.get('status')}, message={data.get('message')}")
                    
                    if data.get('status') == '1' or data.get('message') == 'OK':
                        return data
                    else:
                        logger.error(f"‚ùå [BASESCAN_V2] API Error: {data.get('message')}")
                        return None
                else:
                    logger.error(f"‚ùå [BASESCAN_V2] HTTP Error: {response.status}")
                    return None
    except Exception as e:
        logger.error(f"‚ùå [BASESCAN_V2] Request Error: {e}")
        return None

async def get_contract_transactions(contract_address, chain_id, token_contract=None):
    """–í–µ—Ä—Å–∏—è –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å —Å–∞–π—Ç–æ–º Arbitrum Scan"""
    if token_contract:
        params = {
            'module': 'account',
            'action': 'tokentx',
            'contractaddress': token_contract,
            'address': contract_address,
            'sort': 'desc'
        }
    else:
        params = {
            'module': 'account',
            'action': 'txlist',
            'address': contract_address,
            'sort': 'desc'
        }
    
    all_transactions = []
    page = 1
    unique_address_pairs = set()
    
    # ‚ö†Ô∏è –ü–û–õ–£–ß–ê–ï–ú –í–°–ï –°–¢–†–ê–ù–ò–¶–´ –î–û –ö–û–ù–¶–ê
    while True:
        params['page'] = page
        params['offset'] = 1000
        
        logger.info(f"üìÑ –ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}")
        
        data = await make_etherscan_request(chain_id, params)
        
        if not data or not isinstance(data.get('result'), list):
            break
            
        transactions = data['result']
        
        if not transactions:
            break
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        for tx in transactions:
            from_addr = tx.get('from', '').lower()
            to_addr = tx.get('to', '').lower()
            address_pair = (from_addr, to_addr)
            
            if from_addr and to_addr and address_pair not in unique_address_pairs:
                unique_address_pairs.add(address_pair)
                all_transactions.append(tx)
        
        current_total = len(all_transactions)
        logger.info(f"üì• –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: {len(transactions)} –∑–∞–ø–∏—Å–µ–π, {current_total} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä")
        
        # ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–†–ï–ö–†–ê–©–ê–ï–ú –¢–û–õ–¨–ö–û –ö–û–ì–î–ê –ü–û–õ–£–ß–ê–ï–ú –ü–£–°–¢–£–Æ –°–¢–†–ê–ù–ò–¶–£
        if len(transactions) < 1000:
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {page}")
            break
            
        page += 1
        
        # ‚ö†Ô∏è –ó–ê–©–ò–¢–ê –û–¢ –ë–ï–°–ö–û–ù–ï–ß–ù–û–ì–û –¶–ò–ö–õ–ê
        if page > 10:
            logger.warning("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 10 —Å—Ç—Ä–∞–Ω–∏—Ü")
            break
            
        await asyncio.sleep(0.1)
    
    total_count = len(all_transactions)
    logger.info(f"üìä –§–ò–ù–ê–õ–¨–ù–´–ô –ò–¢–û–ì: {total_count} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    
    return all_transactions, total_count

async def get_contract_transactions_complete(contract_address, chain_id, token_contract=None):
    """–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è - –ø–æ–ª—É—á–∞–µ—Ç –í–°–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –í–°–ï–• –∫–æ—à–µ–ª—å–∫–æ–≤"""
    if token_contract:
        params = {
            'module': 'account',
            'action': 'tokentx',
            'contractaddress': token_contract,
            'address': contract_address,
            'sort': 'desc'
        }
    else:
        params = {
            'module': 'account',
            'action': 'txlist',
            'address': contract_address,
            'sort': 'desc'
        }
    
    all_transactions = []
    page = 1
    
    # ‚ö†Ô∏è –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô - –ü–û–õ–£–ß–ê–ï–ú –í–°–ï –°–¢–†–ê–ù–ò–¶–´
    while True:
        params['page'] = page
        params['offset'] = 1000
        
        logger.info(f"üìÑ –ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page} –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        
        data = await make_etherscan_request(chain_id, params)
        
        if not data:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}")
            break
            
        result = data.get('result')
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ API
        if isinstance(result, str):
            if 'no transactions' in result.lower():
                logger.info(f"üì≠ –ë–æ–ª—å—à–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ—Ç")
                break
            elif any(error in result.lower() for error in ['error', 'max', 'rate limit']):
                logger.error(f"‚ùå API –æ—à–∏–±–∫–∞: {result}")
                break
        
        if not isinstance(result, list):
            logger.error(f"‚ùå –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫, –ø–æ–ª—É—á–µ–Ω: {type(result)}")
            break
            
        transactions = result
        
        if not transactions:
            logger.info(f"üì≠ –ë–æ–ª—å—à–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}")
            break
        
        # ‚ö†Ô∏è –§–ò–õ–¨–¢–†–£–ï–ú –¢–û–õ–¨–ö–û –ü–û –•–ï–®–ê–ú (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
        unique_hashes = set()
        new_transactions = []
        
        for tx in transactions:
            tx_hash = tx.get('hash')
            if tx_hash and tx_hash not in unique_hashes:
                unique_hashes.add(tx_hash)
                new_transactions.append(tx)
        
        all_transactions.extend(new_transactions)
        current_total = len(all_transactions)
        
        logger.info(f"üì• –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: {len(transactions)} –∑–∞–ø–∏—Å–µ–π, {len(new_transactions)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ö–µ—à–µ–π, –≤—Å–µ–≥–æ: {current_total}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 —Å—Ç—Ä–∞–Ω–∏—Ü
        if page % 5 == 0:
            logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {page} —Å—Ç—Ä–∞–Ω–∏—Ü, –Ω–∞–π–¥–µ–Ω–æ {current_total} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        
        # ‚ö†Ô∏è –ü–†–ï–ö–†–ê–©–ê–ï–ú –¢–û–õ–¨–ö–û –ö–û–ì–î–ê API –í–û–ó–í–†–ê–©–ê–ï–¢ –ú–ï–ù–¨–®–ï 1000 –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
        if len(transactions) < 1000:
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –í–°–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞. –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {page}")
            break
            
        page += 1
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ (–Ω–æ —Å –±–æ–ª—å—à–∏–º –∑–∞–ø–∞—Å–æ–º)
        if page > 50:
            logger.warning(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 50 —Å—Ç—Ä–∞–Ω–∏—Ü. –ü–æ–ª—É—á–µ–Ω–æ {current_total} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
            break
            
        await asyncio.sleep(0.3)
    
    total_count = len(all_transactions)
    logger.info(f"üìä –ü–û–õ–ù–´–ô –ò–¢–û–ì: {total_count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, {page} —Å—Ç—Ä–∞–Ω–∏—Ü")
    
    return all_transactions, total_count

async def get_contract_transactions_accurate(contract_address, chain_id, token_contract=None):
    """–¢–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    if token_contract:
        params = {
            'module': 'account',
            'action': 'tokentx',
            'contractaddress': token_contract,
            'address': contract_address,
            'sort': 'desc'
        }
    else:
        params = {
            'module': 'account',
            'action': 'txlist',
            'address': contract_address,
            'sort': 'desc'
        }
    
    all_transactions = []
    page = 1
    
    # ‚ö†Ô∏è –û–¢–°–õ–ï–ñ–ò–í–ê–ï–ú –£–ù–ò–ö–ê–õ–¨–ù–´–ï –•–ï–®–ò –¢–†–ê–ù–ó–ê–ö–¶–ò–ô (–∞ –Ω–µ –ø–∞—Ä—ã –∞–¥—Ä–µ—Å–æ–≤)
    unique_hashes = set()
    
    while True:
        params['page'] = page
        params['offset'] = 1000
        
        logger.info(f"üìÑ –ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page} –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        
        data = await make_etherscan_request(chain_id, params)
        
        if not data or not isinstance(data.get('result'), list):
            break
            
        transactions = data['result']
        
        if not transactions:
            break
        
        # ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§–ò–õ–¨–¢–†–£–ï–ú –ü–û –£–ù–ò–ö–ê–õ–¨–ù–´–ú –•–ï–®–ê–ú
        new_transactions = []
        for tx in transactions:
            tx_hash = tx.get('hash')
            if tx_hash and tx_hash not in unique_hashes:
                unique_hashes.add(tx_hash)
                new_transactions.append(tx)
        
        all_transactions.extend(new_transactions)
        current_total = len(all_transactions)
        
        logger.info(f"üì• –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: {len(transactions)} –∑–∞–ø–∏—Å–µ–π, {len(new_transactions)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ö–µ—à–µ–π, –≤—Å–µ–≥–æ: {current_total}")
        
        if page == 1 and new_transactions:
            for i, tx in enumerate(new_transactions[:3]):
                logger.info(f"üîç [ACCURATE_SAMPLE_{i}] From: {tx.get('from')}, To: {tx.get('to')}, Hash: {tx.get('hash')}")
        
        # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º –º–µ–Ω—å—à–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        if len(transactions) < 1000:
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
            break
            
        page += 1
        
        if page > 10:
            logger.warning("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 10 —Å—Ç—Ä–∞–Ω–∏—Ü")
            break
            
        await asyncio.sleep(0.3)
    
    total_count = len(all_transactions)
    logger.info(f"üìä –¢–û–ß–ù–´–ô –ò–¢–û–ì: {total_count} –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–ø–æ —Ö–µ—à–∞–º)")
    
    return all_transactions, total_count

# ========== –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø ==========
PROGRESS_CACHE_FILE = "allowance_progress.json"
CACHE_SAVE_INTERVAL = 25  # –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–∞–∂–¥—ã–µ 25 –∫–æ—à–µ–ª—å–∫–æ–≤
# ========== –§–£–ù–ö–¶–ò–ò –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–ì–†–ï–°–°–ê ==========

def load_progress(user_id):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(PROGRESS_CACHE_FILE, "r") as f:
            all_progress = json.load(f)
            return all_progress.get(str(user_id))
    except (FileNotFoundError, json.JSONDecodeError):
        return None

def save_progress(user_id, progress_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ñ–∞–π–ª"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        try:
            with open(PROGRESS_CACHE_FILE, "r") as f:
                all_progress = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            all_progress = {}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_progress[str(user_id)] = progress_data
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        with open(PROGRESS_CACHE_FILE, "w") as f:
            json.dump(all_progress, f, indent=2)
            
        logger.info(f"üíæ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {progress_data['current_index']}/{progress_data['total_wallets']}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")

def delete_progress(user_id):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    try:
        with open(PROGRESS_CACHE_FILE, "r") as f:
            all_progress = json.load(f)
        
        if str(user_id) in all_progress:
            del all_progress[str(user_id)]
            
        with open(PROGRESS_CACHE_FILE, "w") as f:
            json.dump(all_progress, f, indent=2)
            
        logger.info(f"üßπ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")

# ========== –ë–ê–ó–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ë–ê–õ–ê–ù–°–ê –ò ALLOWANCE ==========

async def get_token_balance(wallet_address, token_contract, chain_id, is_eth=False):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ ETH"""
    try:
        logger.info(f"üîß [BALANCE_DETAILED] –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {wallet_address}")
        
        if is_eth:
            params = {
                'module': 'account',
                'action': 'balance',
                'address': wallet_address,
                'tag': 'latest'
            }
        else:
            params = {
                'module': 'account',
                'action': 'tokenbalance',
                'contractaddress': token_contract,
                'address': wallet_address,
                'tag': 'latest'
            }
        
        data = await make_etherscan_request(chain_id, params)
        
        logger.info(f"üîß [BALANCE_DETAILED] –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API: {data}")
        
        if data and (data.get('status') == '1' or data.get('message') == 'OK'):
            balance_raw = data.get('result', '0')
            logger.info(f"üîß [BALANCE_DETAILED] Raw –±–∞–ª–∞–Ω—Å: '{balance_raw}' (—Ç–∏–ø: {type(balance_raw)})")
            
            # üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ balance_raw –Ω–µ –ø—É—Å—Ç–æ–π –∏ –Ω–µ '0'
            if not balance_raw or balance_raw == '0':
                logger.warning(f"üîß [BALANCE_DETAILED] Raw –±–∞–ª–∞–Ω—Å –ø—É—Å—Ç–æ–π –∏–ª–∏ '0'")
                return 0
            
            try:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int
                balance_int = int(balance_raw)
                logger.info(f"üîß [BALANCE_DETAILED] –ë–∞–ª–∞–Ω—Å –∫–∞–∫ int: {balance_int}")
                
                if is_eth:
                    balance = balance_int / (10 ** 18)  # ETH decimals
                else:
                    balance = balance_int / (10 ** 6)   # USDC decimals
                
                logger.info(f"üîß [BALANCE_DETAILED] –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å: {balance}")
                return balance
                
            except ValueError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞ '{balance_raw}': {e}")
                return 0
        else:
            error_msg = data.get('message', 'No response') if data else 'No data'
            logger.warning(f"üîß [BALANCE_DETAILED] –û—à–∏–±–∫–∞ API: {error_msg}")
            return 0
            
    except Exception as e:
        logger.error(f"‚ùå Balance check error for {wallet_address[:8]}: {e}")
        return 0

# ========== –ë–ê–ó–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ë–ê–õ–ê–ù–°–ê –ò ALLOWANCE ==========

async def get_token_balance(wallet_address, token_contract, chain_id, is_eth=False):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ ETH"""
    try:
        if is_eth:
            # –î–ª—è ETH
            params = {
                'module': 'account',
                'action': 'balance',
                'address': wallet_address,
                'tag': 'latest'
            }
        else:
            # –î–ª—è ERC20 —Ç–æ–∫–µ–Ω–æ–≤ (USDC)
            params = {
                'module': 'account',
                'action': 'tokenbalance',
                'contractaddress': token_contract,
                'address': wallet_address,
                'tag': 'latest'
            }
        
        data = await make_etherscan_request(chain_id, params)
        
        if data and (data.get('status') == '1' or data.get('message') == 'OK'):
            balance_raw = data.get('result', '0')
            if is_eth:
                balance = int(balance_raw) / (10 ** 18)  # ETH decimals
            else:
                balance = int(balance_raw) / (10 ** 6)   # USDC decimals
            return balance
        else:
            return 0
            
    except Exception as e:
        logger.error(f"‚ùå Balance check error for {wallet_address[:8]}: {e}")
        return 0

# ========== –§–£–ù–ö–¶–ò–ò –° RETRY –õ–û–ì–ò–ö–û–ô ==========

async def get_token_balance_with_retry(wallet, token_contract, chain_id, is_eth=False, max_retries=3):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Å retry –ª–æ–≥–∏–∫–æ–π –∏ adaptive pacing"""
    base_delay = 1.0  # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    
    for attempt in range(max_retries):
        try:
            # –¢–µ–ø–µ—Ä—å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!
            balance = await get_token_balance(wallet, token_contract, chain_id, is_eth)
            return balance
            
        except Exception as e:
            error_str = str(e)
            
            # Adaptive pacing: —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ rate limit
            if "429" in error_str or "rate limit" in error_str or "Too Many Requests" in error_str:
                wait_time = base_delay * (2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 1s, 2s, 4s
                logger.warning(f"‚ö†Ô∏è Rate limit –¥–ª—è {wallet[:8]}... (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}), –∂–¥–µ–º {wait_time}—Å")
                await asyncio.sleep(wait_time)
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–¥–µ—Ä–∂–∫—É –Ω–∞ 25% –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                base_delay *= 1.25
                continue
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {wallet[:8]}...: {error_str}")
                return 0
    
    logger.error(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å –¥–ª—è {wallet[:8]}...")
    return 0        


async def get_token_balance_with_retry(wallet, token_contract, chain_id, is_eth=False, max_retries=3):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Å retry –ª–æ–≥–∏–∫–æ–π –∏ adaptive pacing"""
    # –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ê: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç USDC –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏
    if not is_eth and token_contract == USDC_CONTRACT_BASE:
        if chain_id == ARBITRUM_CHAIN_ID:
            token_contract = USDC_CONTRACT_ARBITRUM
        elif chain_id == OPTIMISM_CHAIN_ID:
            token_contract = USDC_CONTRACT_OPTIMISM
    
    base_delay = 1.0  # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    
    for attempt in range(max_retries):
        try:
            balance = await get_token_balance(wallet, token_contract, chain_id, is_eth)
            return balance
            
        except Exception as e:
            error_str = str(e)
            
            # Adaptive pacing: —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ rate limit
            if "429" in error_str or "rate limit" in error_str or "Too Many Requests" in error_str:
                wait_time = base_delay * (2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 1s, 2s, 4s
                logger.warning(f"‚ö†Ô∏è Rate limit –¥–ª—è {wallet[:8]}... (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}), –∂–¥–µ–º {wait_time}—Å")
                await asyncio.sleep(wait_time)
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–¥–µ—Ä–∂–∫—É –Ω–∞ 25% –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                base_delay *= 1.25
                continue
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {wallet[:8]}...: {error_str}")
                return 0
    
    logger.error(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å –¥–ª—è {wallet[:8]}...")
    return 0

async def get_allowance_basescan(wallet_address, token_contract, spender_address):
    """–ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å allowance —á–µ—Ä–µ–∑ V2 API –¥–ª—è Base —Å–µ—Ç–∏"""
    try:
        params = {
            'module': 'account',
            'action': 'tokenallowance',
            'contractaddress': token_contract,
            'address': wallet_address,
            'spender': spender_address
        }
        
        data = await make_basescan_request(params)
        
        if data and (data.get('status') == '1' or data.get('message') == 'OK'):
            allowance_raw = data.get('result', '0')
            allowance = int(allowance_raw)
            allowance_usd = allowance / (10 ** 6)  # USDC decimals
            
            short_wallet = wallet_address[:8] + "..." + wallet_address[-6:]
            short_spender = spender_address[:8] + "..." + spender_address[-6:]
            logger.info(f"‚úÖ [BASESCAN_ALLOWANCE_V2] {short_wallet} -> {short_spender}: {allowance_usd:,.6f} USDC")
            
            return allowance_usd
            
    except Exception as e:
        logger.error(f"‚ùå [BASESCAN_ALLOWANCE_V2_ERROR] {e}")
    
    return 0

async def get_token_allowance(wallet_address, token_contract, spender_address, chain_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏"""
    # –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ê: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏
    if chain_id == ARBITRUM_CHAIN_ID and token_contract == USDC_CONTRACT_BASE:
        token_contract = USDC_CONTRACT_ARBITRUM
    elif chain_id == OPTIMISM_CHAIN_ID and token_contract == USDC_CONTRACT_BASE:
        token_contract = USDC_CONTRACT_OPTIMISM
    
    # –ü—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π V2 –º–µ—Ç–æ–¥
    params = {
        'module': 'account',
        'action': 'tokenallowance',
        'contractaddress': token_contract,  # –¢–µ–ø–µ—Ä—å –∑–¥–µ—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
        'address': wallet_address,
        'spender': spender_address
    }
    
    data = await make_etherscan_request(chain_id, params)
    
    if data and (data.get('status') == '1' or data.get('message') == 'OK'):
        allowance_raw = data.get('result', '0')
        allowance = int(allowance_raw)
        allowance_usd = allowance / (10 ** 6)
        
        short_wallet = wallet_address[:8] + "..." + wallet_address[-6:]
        short_spender = spender_address[:8] + "..." + spender_address[-6:]
        logger.info(f"‚úÖ [STANDARD_ALLOWANCE] {short_wallet} -> {short_spender}: {allowance_usd:,.6f} USDC")
        
        return allowance_usd
    else:
        error_msg = data.get('message', 'No response') if data else 'No data'
        logger.warning(f"‚ö†Ô∏è [STANDARD_ALLOWANCE_FAILED] {wallet_address}: {error_msg}")
        
        return 0
    
async def get_allowance_via_rpc(wallet_address, token_contract, spender_address):
    """–ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ Base RPC - –° –ó–ê–î–ï–†–ñ–ö–ê–ú–ò"""
    try:
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ allowance(owner, spender)
        data_payload = "0xdd62ed3e" + wallet_address[2:].zfill(64) + spender_address[2:].zfill(64)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º JSON-RPC –∑–∞–ø—Ä–æ—Å
        rpc_payload = {
            "jsonrpc": "2.0",
            "method": "eth_call",
            "params": [{
                "to": token_contract,
                "data": data_payload
            }, "latest"],
            "id": 1
        }
        
        logger.info(f"üîß [RPC_CALL] Calling contract via Base RPC...")
        
        # –ó–ê–î–ï–†–ñ–ö–ê –î–õ–Ø –ò–ó–ë–ï–ñ–ê–ù–ò–Ø RATE LIMIT
        await asyncio.sleep(0.3)
        
        async with aiohttp.ClientSession() as session:
            async with session.post(BASE_RPC_URL, json=rpc_payload, timeout=30) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    if data.get('result'):
                        result_hex = data['result']
                        if result_hex != '0x':
                            allowance_raw = int(result_hex, 16)
                            
                            # MAX_UINT256 –∑–Ω–∞—á–µ–Ω–∏–µ
                            MAX_UINT256 = 115792089237316195423570985008687907853269984665640564039457584007913129639935
                            
                            if allowance_raw == MAX_UINT256:
                                # –î–ª—è MAX_UINT256 –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–ª–∞–Ω—Å –∫–∞–∫ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π allowance
                                params = {
                                    'module': 'account',
                                    'action': 'tokenbalance',
                                    'contractaddress': token_contract,
                                    'address': wallet_address,
                                    'tag': 'latest'
                                }
                                balance_data = await make_etherscan_request(BASE_CHAIN_ID, params)
                                if balance_data and balance_data.get('status') == '1':
                                    balance_raw = balance_data.get('result', '0')
                                    balance = int(balance_raw) / (10 ** 6)
                                    
                                    short_wallet = wallet_address[:8] + "..." + wallet_address[-6:]
                                    short_spender = spender_address[:8] + "..." + spender_address[-6:]
                                    logger.info(f"üéØ [RPC_MAX_ALLOWANCE] {short_wallet} -> {short_spender}: MAX_UINT256 = {balance:.6f} USDC")
                                    
                                    return balance
                            else:
                                allowance_usd = allowance_raw / (10 ** 6)
                                
                                short_wallet = wallet_address[:8] + "..." + wallet_address[-6:]
                                short_spender = spender_address[:8] + "..." + spender_address[-6:]
                                logger.info(f"üéØ [RPC_ALLOWANCE] {short_wallet} -> {short_spender}: {allowance_usd:,.6f} USDC")
                                
                                return allowance_usd
                    
                    logger.warning(f"‚ö†Ô∏è [RPC_CALL] No valid result for {wallet_address}")
                    return 0
                elif response.status == 429:
                    logger.warning(f"‚ö†Ô∏è [RPC_CALL] Rate limited, waiting...")
                    await asyncio.sleep(1)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ rate limit
                    return 0
                else:
                    logger.error(f"‚ùå [RPC_CALL] HTTP Error: {response.status}")
                    return 0
                    
    except Exception as e:
        logger.error(f"‚ùå [RPC_CALL_ERROR] {e}")
        return 0

async def get_allowance_direct(wallet_address, token_contract, spender_address, chain_id):
    """–ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ Etherscan API - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    try:
        # ABI –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ allowance
        data_payload = "0xdd62ed3e"  # allowance(address,address) function selector
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (pad to 32 bytes each)
        data_payload += wallet_address[2:].zfill(64)  # owner
        data_payload += spender_address[2:].zfill(64) # spender
        
        params = {
            'module': 'proxy',
            'action': 'eth_call',
            'to': token_contract,
            'data': data_payload,
            'tag': 'latest'
        }
        
        data = await make_etherscan_request(chain_id, params)
        
        if data and data.get('result') and data.get('result') != '0x':
            # –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ hex, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ decimal
            allowance_hex = data['result']
            allowance_raw = int(allowance_hex, 16)
            
            # MAX_UINT256 –∑–Ω–∞—á–µ–Ω–∏–µ
            MAX_UINT256 = 115792089237316195423570985008687907853269984665640564039457584007913129639935
            
            if allowance_raw == MAX_UINT256:
                # –î–ª—è MAX_UINT256 –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ –∫–∞–∫ –¥–æ—Å—Ç—É–ø–Ω—É—é —Å—É–º–º—É
                is_eth = (token_contract == ETH_CONTRACT)
                balance = await get_token_balance(wallet_address, token_contract, chain_id, is_eth)
                allowance_usd = balance  # –í–µ—Å—å –±–∞–ª–∞–Ω—Å –¥–æ—Å—Ç—É–ø–µ–Ω
                
                short_wallet = wallet_address[:8] + "..." + wallet_address[-6:]
                short_spender = spender_address[:8] + "..." + spender_address[-6:]
                logger.info(f"üéØ [MAX_ALLOWANCE] {short_wallet} -> {short_spender}: MAX_UINT256 = –≤–µ—Å—å –±–∞–ª–∞–Ω—Å {balance:.2f} USDC")
                
                return allowance_usd
            else:
                allowance_usd = allowance_raw / (10 ** 6)  # USDC decimals
                
                short_wallet = wallet_address[:8] + "..." + wallet_address[-6:]
                short_spender = spender_address[:8] + "..." + spender_address[-6:]
                logger.info(f"üéØ [DIRECT_ALLOWANCE] {short_wallet} -> {short_spender}: {allowance_usd:,.6f} USDC")
                
                return allowance_usd
        else:
            logger.warning(f"‚ö†Ô∏è [DIRECT_ALLOWANCE] No result for {wallet_address}")
            
    except Exception as e:
        logger.error(f"‚ùå [DIRECT_ALLOWANCE_ERROR] {e}")
    
    return 0

# ========== –ú–û–î–£–õ–¨ 1: –ê–ù–ê–õ–ò–ó –ö–û–ù–¢–†–ê–ö–¢–û–í ==========

async def analyze_contract_all_networks(contract_address, token_type, progress_callback=None):
    """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤–æ –≤—Å–µ—Ö —Å–µ—Ç—è—Ö - –° –î–ï–¢–ê–õ–¨–ù–´–ú –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú"""
    all_wallets = set()
    total_processed = 0
    
    for i, network in enumerate(NETWORK_PRIORITY):
        if progress_callback:
            progress = int((i / len(NETWORK_PRIORITY)) * 100)
            await progress_callback(f"üîç –ê–Ω–∞–ª–∏–∑ –≤ {network['name']}...", progress)
        
        logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ {network['name']}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞
        token_contract = network['usdc_contract'] if token_type == 'usdc' else ETH_CONTRACT
        
        transactions, tx_count = await get_contract_transactions(
            contract_address, 
            network['chain_id'], 
            token_contract if token_type == 'usdc' else None
        )
        
        logger.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ {network['name']}")
        
        for j, tx in enumerate(transactions):
            try:
                if not isinstance(tx, dict):
                    logger.warning(f"‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {j} –≤ {network['name']} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º: {type(tx)}")
                    continue
                    
                from_addr = tx.get('from')
                to_addr = tx.get('to')
                
                if from_addr:
                    all_wallets.add(from_addr.lower())
                if to_addr:
                    all_wallets.add(to_addr.lower())
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {network['name']} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {j}: {e}")
                continue
        
        total_processed += tx_count
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ {network['name']}")
    
    return list(all_wallets), total_processed



async def analyze_contract_single_network(contract_address, network_name, token_type, progress_callback=None):
    network = next((n for n in NETWORK_PRIORITY if n['name'] == network_name), None)
    if not network:
        return [], 0
    
    if progress_callback:
        await progress_callback(f"üîç –ê–Ω–∞–ª–∏–∑ –≤ {network_name}...", 0)
    
    token_contract = network['usdc_contract'] if token_type == 'usdc' else ETH_CONTRACT
    
    # ‚ö†Ô∏è –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–û–õ–ù–£–Æ –í–ï–†–°–ò–Æ –î–õ–Ø –í–°–ï–• –°–ï–¢–ï–ô
    transactions, total_tx = await get_contract_transactions_complete(
    contract_address, network['chain_id'], token_contract if token_type == 'usdc' else None
    )
    
    logger.info(f"üîç –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    
    wallets = set()
    
    for i, tx in enumerate(transactions):
        try:
            from_addr = tx.get('from', '').lower()
            to_addr = tx.get('to', '').lower()
            
            # ‚ö†Ô∏è –î–û–ë–ê–í–õ–Ø–ï–ú –í–°–ï –í–ê–õ–ò–î–ù–´–ï –ê–î–†–ï–°–ê
            if from_addr and len(from_addr) == 42 and from_addr.startswith('0x'):
                wallets.add(from_addr)
            if to_addr and len(to_addr) == 42 and to_addr.startswith('0x'):
                wallets.add(to_addr)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {i}: {e}")
            continue
    
    logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –Ω–∞–π–¥–µ–Ω–æ {len(wallets)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤")
    
    if progress_callback:
        await progress_callback(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω", 100)
    
    return list(wallets), len(transactions)

async def get_allowance_via_arbitrum_rpc(wallet_address, token_contract, spender_address):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ allowance —á–µ—Ä–µ–∑ —Ä–∞–±–æ—á–∏–π RPC –¥–ª—è Arbitrum —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–≤–æ–π —Ä–∞–±–æ—á–∏–π RPC
        ARBITRUM_RPC_URL = "https://arbitrum-one-rpc.publicnode.com"
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ allowance(owner, spender)
        data_payload = "0xdd62ed3e" + wallet_address[2:].zfill(64) + spender_address[2:].zfill(64)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º JSON-RPC –∑–∞–ø—Ä–æ—Å
        rpc_payload = {
            "jsonrpc": "2.0",
            "method": "eth_call",
            "params": [{
                "to": token_contract,
                "data": data_payload
            }, "latest"],
            "id": 1
        }
        
        logger.info(f"üîß [ARBITRUM_RPC_DETAILED] Calling contract...")
        logger.info(f"üîß [ARBITRUM_RPC_DETAILED] Wallet: {wallet_address}")
        logger.info(f"üîß [ARBITRUM_RPC_DETAILED] Token: {token_contract}")
        logger.info(f"üîß [ARBITRUM_RPC_DETAILED] Spender: {spender_address}")
        logger.info(f"üîß [ARBITRUM_RPC_DETAILED] Data payload: {data_payload}")
        
        await asyncio.sleep(0.5)
        
        async with aiohttp.ClientSession() as session:
            async with session.post(ARBITRUM_RPC_URL, json=rpc_payload, timeout=30) as response:
                if response.status == 200:
                    response_text = await response.text()
                    logger.info(f"üîß [ARBITRUM_RPC_RESPONSE] Raw response: {response_text}")
                    
                    data = await response.json()
                    
                    if data.get('result'):
                        result_hex = data['result']
                        logger.info(f"üîß [ARBITRUM_RPC_RESULT] Hex result: {result_hex}")
                        
                        if result_hex != '0x':
                            allowance_raw = int(result_hex, 16)
                            allowance_usd = allowance_raw / (10 ** 6)
                            
                            short_wallet = wallet_address[:8] + "..." + wallet_address[-6:]
                            short_spender = spender_address[:8] + "..." + spender_address[-6:]
                            
                            logger.info(f"üéØ [ARBITRUM_ALLOWANCE_FOUND] {short_wallet} -> {short_spender}: {allowance_usd:,.6f} USDC (raw: {allowance_raw})")
                            return allowance_usd
                        else:
                            logger.info(f"üîç [ARBITRUM_EMPTY_RESULT] Empty result (0x) for {wallet_address[:8]}...")
                    else:
                        logger.info(f"üîç [ARBITRUM_NO_RESULT] No result in response for {wallet_address[:8]}...")
                    
                    return 0
                else:
                    logger.error(f"‚ùå [ARBITRUM_RPC_HTTP] HTTP Error: {response.status}")
                    return 0
                    
    except Exception as e:
        logger.error(f"‚ùå [ARBITRUM_RPC_ERROR] {e}")
        import traceback
        logger.error(f"‚ùå [ARBITRUM_RPC_TRACEBACK] {traceback.format_exc()}")
        return 0

# ========== –ú–û–î–£–õ–¨ 2: –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï ALLOWANCE ==========

async def scan_allowance_single_network(wallets, token_contract, spender_address, network, progress_callback=None):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ allowance - –ú–ï–ù–¨–®–ï API CALLS"""
    results = []
    total_wallets = len(wallets)
    
    logger.info(f"üîç [SCAN_OPTIMIZED] –°–µ—Ç—å: {network['name']}, –ö–æ—à–µ–ª—å–∫–æ–≤: {total_wallets}")
    
    for i, wallet in enumerate(wallets):
        if progress_callback and i % 10 == 0:
            progress = int((i / total_wallets) * 100)
            await progress_callback(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {i+1}/{total_wallets}", progress)
        
        is_eth = (token_contract == ETH_CONTRACT)
        
        # 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        balance = await get_token_balance(wallet, token_contract, network['chain_id'], is_eth)
        
        # –ï–°–õ–ò –ë–ê–õ–ê–ù–° = 0 ‚Üí –ü–†–û–ü–£–°–ö–ê–ï–ú –ø—Ä–æ–≤–µ—Ä–∫—É allowance (–≠–ö–û–ù–û–ú–ò–Ø API CALL)
        if balance <= 0:
            continue
            
        # 2. –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å > 0, –ø—Ä–æ–≤–µ—Ä—è–µ–º allowance
        if is_eth:
            allowance = balance
        else:
            if network['chain_id'] == BASE_CHAIN_ID:
                allowance = await get_allowance_via_rpc(wallet, token_contract, spender_address)
            else:
                allowance = await get_token_allowance(wallet, token_contract, spender_address, network['chain_id'])
        
        if allowance > 0:
            results.append({
                'address': wallet,
                'allowance': allowance,
                'balance': balance,
                'available': min(allowance, balance),
                'network': network['name']
            })
            logger.info(f"üéØ [ALLOWANCE_FOUND] {wallet[:8]}...: {allowance:.6f} USDC")
        
        await asyncio.sleep(0.1)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–Ω–≥–∏
    results.sort(key=lambda x: x['allowance'], reverse=True)
    for i, result in enumerate(results):
        result['rank'] = i + 1
    
    logger.info(f"‚úÖ [SCAN_OPTIMIZED] –ù–∞–π–¥–µ–Ω–æ {len(results)} –∫–æ—à–µ–ª—å–∫–æ–≤, —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ API calls: {total_wallets - len(results)}")
    return results

async def scan_allowance_parallel(wallets, token_contract, spender_address, network, progress_callback=None, batch_size=2):
    """–ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –í–°–ï–• –∫–æ—à–µ–ª—å–∫–æ–≤ —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º"""
    results = []
    total_wallets = len(wallets)
    checked_wallets = 0
    skipped_due_to_zero_balance = 0
    
    logger.info(f"üîç [GUARANTEED_SCAN] –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ {total_wallets} –∫–æ—à–µ–ª—å–∫–æ–≤")
    
    async def check_single_wallet_with_retry(wallet, max_retries=3):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—à–µ–ª—å–∫–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        for attempt in range(max_retries):
            try:
                is_eth = (token_contract == ETH_CONTRACT)
                
                # 1. –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å (—ç—Ç–æ –Ω–∞–¥–µ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å)
                balance = await get_token_balance(wallet, token_contract, network['chain_id'], is_eth)
                
                # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å = 0 ‚Üí –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)
                if balance <= 0:
                    return {'status': 'zero_balance', 'wallet': wallet, 'balance': balance}
                
                # 2. –ï—Å–ª–∏ ETH ‚Üí allowance = –±–∞–ª–∞–Ω—Å
                if is_eth:
                    return {
                        'status': 'success', 
                        'wallet': wallet, 
                        'allowance': balance, 
                        'balance': balance,
                        'available': balance,
                        'network': network['name']
                    }
                
                # 3. –î–ª—è USDC: –ø—Ä–æ–≤–µ—Ä—è–µ–º allowance —Å –ø–∞—É–∑–æ–π –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                if attempt > 0:
                    retry_delay = 1.0 * attempt  # –£–≤–µ–ª–∏—á–∏–≤–∞—é—â–∞—è—Å—è –ø–∞—É–∑–∞
                    logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt} –¥–ª—è {wallet[:8]}..., –ø–∞—É–∑–∞ {retry_delay}—Å")
                    await asyncio.sleep(retry_delay)
                
                allowance = await get_allowance_robust(wallet, token_contract, spender_address, network['chain_id'])
                
                if allowance > 0:
                    return {
                        'status': 'success',
                        'wallet': wallet,
                        'allowance': allowance,
                        'balance': balance,
                        'available': min(allowance, balance),
                        'network': network['name']
                    }
                else:
                    return {
                        'status': 'no_allowance',
                        'wallet': wallet,
                        'balance': balance,
                        'allowance': 0
                    }
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt+1} –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è {wallet[:8]}...: {e}")
                if attempt == max_retries - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —Ç–æ–∂–µ failed
                    logger.error(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å –¥–ª—è {wallet}")
                    return {'status': 'error', 'wallet': wallet, 'error': str(e)}
        
        return {'status': 'error', 'wallet': wallet, 'error': 'Max retries exceeded'}
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ—à–µ–ª—å–∫–∏ –ú–ê–õ–ï–ù–¨–ö–ò–ú–ò –ë–ê–¢–ß–ê–ú–ò —Å –ë–û–õ–¨–®–ò–ú–ò –ü–ê–£–ó–ê–ú–ò
    for batch_start in range(0, total_wallets, batch_size):
        batch_end = min(batch_start + batch_size, total_wallets)
        batch = wallets[batch_start:batch_end]
        current_batch = batch_start // batch_size + 1
        total_batches = (total_wallets + batch_size - 1) // batch_size
        
        logger.info(f"üì¶ –ë–∞—Ç—á {current_batch}/{total_batches}: –∫–æ—à–µ–ª—å–∫–∏ {batch_start}-{batch_end}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—á–∞
        batch_tasks = []
        for wallet in batch:
            task = asyncio.create_task(check_single_wallet_with_retry(wallet))
            batch_tasks.append(task)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –í–°–ï–• –∑–∞–¥–∞—á –≤ –±–∞—Ç—á–µ
        batch_results = await asyncio.gather(*batch_tasks, return_exceptions=True)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞—Ç—á–∞
        batch_success = 0
        batch_zero_balance = 0
        batch_no_allowance = 0
        batch_errors = 0
        
        for i, result in enumerate(batch_results):
            wallet = batch[i]
            
            if isinstance(result, Exception):
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {wallet[:8]}...: {result}")
                batch_errors += 1
                continue
            
            if result['status'] == 'success':
                results.append({
                    'address': result['wallet'],
                    'allowance': result['allowance'],
                    'balance': result['balance'],
                    'available': result['available'],
                    'network': result['network']
                })
                batch_success += 1
                checked_wallets += 1
                
            elif result['status'] == 'zero_balance':
                batch_zero_balance += 1
                checked_wallets += 1
                skipped_due_to_zero_balance += 1
                
            elif result['status'] == 'no_allowance':
                batch_no_allowance += 1
                checked_wallets += 1
                
            elif result['status'] == 'error':
                batch_errors += 1
                checked_wallets += 1
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞—Ç—á–∞
        logger.info(f"‚úÖ –ë–∞—Ç—á {current_batch} –∑–∞–≤–µ—Ä—à–µ–Ω: "
                   f"–£—Å–ø–µ—à–Ω–æ={batch_success}, "
                   f"–ù—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å={batch_zero_balance}, "
                   f"–ù–µ—Ç allowance={batch_no_allowance}, "
                   f"–û—à–∏–±–∫–∏={batch_errors}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if progress_callback:
            progress = int((batch_end / total_wallets) * 100)
            status_text = (f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {batch_end}/{total_wallets}\n"
                          f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(results)}\n"
                          f"üí∏ –ù—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å: {skipped_due_to_zero_balance}")
            await progress_callback(status_text, progress)
        
        # –ü–ê–£–ó–ê –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limit
        if batch_end < total_wallets:
            pause_time = 1.0  # 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            logger.info(f"‚è≥ –ü–∞—É–∑–∞ {pause_time}—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –±–∞—Ç—á–µ–º...")
            await asyncio.sleep(pause_time)
    
    # –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    logger.info(f"üìä [GUARANTEED_SCAN] –ò–¢–û–ì–û: "
               f"–ö–æ—à–µ–ª—å–∫–æ–≤={total_wallets}, "
               f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ={checked_wallets}, "
               f"–ù–∞–π–¥–µ–Ω–æ allowance={len(results)}, "
               f"–ù—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å={skipped_due_to_zero_balance}, "
               f"–û—à–∏–±–∫–∏={total_wallets - checked_wallets}")
    
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –∫–æ—à–µ–ª—å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
    if checked_wallets != total_wallets:
        logger.error(f"üö® –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {checked_wallets} –∏–∑ {total_wallets} –∫–æ—à–µ–ª—å–∫–æ–≤!")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results.sort(key=lambda x: x['allowance'], reverse=True)
    for i, result in enumerate(results):
        result['rank'] = i + 1
    
    return results

# ========== –ú–û–î–£–õ–¨ 3: –≠–ö–°–ü–û–†–¢ –í CSV –ò EXCEL ==========

async def export_to_csv(results, filename_prefix):
    """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV"""
    logger.info(f"üîß [EXPORT_DEBUG] Exporting {len(results)} results")
    
    if not results:
        logger.warning("‚ö†Ô∏è [EXPORT_DEBUG] No results to export")
        return None
    
    try:
        output = StringIO()
        writer = csv.writer(output)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        writer.writerow(['Rank', 'Address', 'Allowance', 'Balance', 'Available', 'Network'])
        
        # –î–∞–Ω–Ω—ã–µ
        for result in results:
            writer.writerow([
                result['rank'],
                result['address'],
                f"{result['allowance']:.6f}",
                f"{result['balance']:.6f}",
                f"{result['available']:.6f}",
                result['network']
            ])
        
        csv_content = output.getvalue()
        output.close()
        
        logger.info(f"‚úÖ [EXPORT_DEBUG] CSV created successfully, size: {len(csv_content)} bytes")
        return BytesIO(csv_content.encode('utf-8'))
        
    except Exception as e:
        logger.error(f"‚ùå [EXPORT_DEBUG] Error creating CSV: {e}")
        return None

async def export_wallets_to_txt(wallets, filename_prefix):
    """–≠–∫—Å–ø–æ—Ä—Ç –∫–æ—à–µ–ª—å–∫–æ–≤ –≤ TXT —Ñ–∞–π–ª (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)"""
    try:
        if not wallets:
            logger.warning("‚ö†Ô∏è [TXT_EXPORT] No wallets to export")
            return None
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ TXT —Ñ–∞–π–ª–∞
        txt_content = "\n".join(wallets)
        
        logger.info(f"‚úÖ [TXT_EXPORT] Created TXT file with {len(wallets)} wallets")
        return BytesIO(txt_content.encode('utf-8'))
        
    except Exception as e:
        logger.error(f"‚ùå [TXT_EXPORT] Error creating TXT file: {e}")
        return None

async def export_to_excel(results, filename_prefix):
    """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Excel —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        if not results:
            logger.warning("‚ö†Ô∏è [EXCEL_EXPORT] No results to export")
            return None
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–∏–≥—É Excel
        workbook = openpyxl.Workbook()
        sheet = workbook.active
        sheet.title = "Allowance Results"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
        headers = ['Rank', 'Address', 'Allowance (USDC)', 'Balance (USDC)', 'Available (USDC)', 'Network']
        sheet.append(headers)
        
        # –°—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        header_font = Font(bold=True, color="FFFFFF")
        header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
        header_alignment = Alignment(horizontal="center", vertical="center")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
        for col_num, header in enumerate(headers, 1):
            cell = sheet.cell(row=1, column=col_num)
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = header_alignment
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        for result in results:
            sheet.append([
                result['rank'],
                result['address'],
                result['allowance'],
                result['balance'],
                result['available'],
                result['network']
            ])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        number_columns = ['C', 'D', 'E']  # Allowance, Balance, Available
        for col_letter in number_columns:
            for row in range(2, len(results) + 2):
                cell = sheet[f"{col_letter}{row}"]
                cell.number_format = '0.000000'
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
        column_widths = {
            'A': 8,   # Rank
            'B': 66,  # Address
            'C': 15,  # Allowance
            'D': 15,  # Balance
            'E': 15,  # Available
            'F': 12   # Network
        }
        
        for col_letter, width in column_widths.items():
            sheet.column_dimensions[col_letter].width = width
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ñ–∏–ª—å—Ç—Ä
        sheet.auto_filter.ref = f"A1:F{len(results) + 1}"
        
        # –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        sheet.freeze_panes = "A2"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
        excel_buffer = BytesIO()
        workbook.save(excel_buffer)
        excel_buffer.seek(0)
        
        logger.info(f"‚úÖ [EXCEL_EXPORT] Created Excel file with {len(results)} results")
        return excel_buffer
        
    except Exception as e:
        logger.error(f"‚ùå [EXCEL_EXPORT] Error creating Excel file: {e}")
        return None

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==========

@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await state.clear()
    await message.answer(
        "üëë –ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê - –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ö–û–ù–¢–†–ê–ö–¢–û–í\n\n"
        "üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "‚Ä¢ üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤\n"
        "‚Ä¢ üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ allowance - –º–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π\n"
        "‚Ä¢ üõ†Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API",
        reply_markup=get_admin_menu_keyboard()
    )

@dp.message(Command("test_allowance"))
async def test_allowance_command(message: types.Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ allowance"""
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    test_wallet = "0x0bD785D8ab76dE1595e595DBc12eF337cc49Ed72"
    test_spender = "0xdf4ff5122170fe28a750d3a1d2b65bb202dd0dd2"
    test_token = "0x833589fCD6eDb6E08f4c7c32D4f71b54bdA02913"
    
    await message.answer("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ allowance...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã
    methods = [
        ("Basescan API", get_allowance_basescan(test_wallet, test_token, test_spender)),
        ("Etherscan V2", get_token_allowance(test_wallet, test_token, test_spender, BASE_CHAIN_ID)),
        ("Direct Call", get_allowance_direct(test_wallet, test_token, test_spender, BASE_CHAIN_ID))
    ]
    
    results = []
    for method_name, method_call in methods:
        try:
            result = await method_call
            results.append(f"‚Ä¢ {method_name}: {result:.6f} USDC")
            logger.info(f"üß™ [TEST] {method_name}: {result:.6f} USDC")
        except Exception as e:
            results.append(f"‚Ä¢ {method_name}: ERROR - {str(e)}")
            logger.error(f"üß™ [TEST] {method_name}: ERROR - {e}")
    
    result_text = "üß™ **–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê:**\n\n" + "\n".join(results)
    await message.answer(result_text, parse_mode="Markdown")

@dp.message(lambda message: message.text == "üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞")
async def start_analysis(message: types.Message, state: FSMContext):
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await message.answer(
        "üîç **–°–æ–±–∏—Ä–∞–µ–º –∫–æ—à–µ–ª—å–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏ —Å —ç—Ç–∏–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n\n"
        "üí° –ü—Ä–∏–º–µ—Ä: `0xdf4ff5122170fe28a750d3a1d2b65bb202dd0dd2`",
        parse_mode="Markdown"
    )
    await state.set_state(AnalyzeState.waiting_for_contract)

@dp.message(AnalyzeState.waiting_for_contract)
async def handle_contract_address(message: types.Message, state: FSMContext):
    contract_address = message.text.strip()
    
    if not (contract_address.startswith('0x') and len(contract_address) == 42):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    await state.update_data(contract_address=contract_address)
    
    await message.answer(
        "üåê –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞:\n\n"
        "‚Ä¢ üîç –û–¥–Ω–∞ —Å–µ—Ç—å - –∞–Ω–∞–ª–∏–∑ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Ç–∏\n"
        "‚Ä¢ üåê –í—Å–µ —Å–µ—Ç–∏ - –∞–Ω–∞–ª–∏–∑ –≤–æ –≤—Å–µ—Ö —Å–µ—Ç—è—Ö (Base, Arbitrum, Optimism)",
        reply_markup=get_analysis_mode_keyboard()
    )
    await state.set_state(AnalyzeState.waiting_for_mode)

async def start_allowance_check(user_id, network_choice, message=None):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É allowance —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    try:
        user_data = current_allowance_data.get(user_id, {})
        wallets = user_data.get('wallets', [])
        token_type = user_data.get('token_type', 'usdc')
        spender_address = user_data.get('spender')
        progress_data = user_data.get('progress_data')
        
        if not wallets or not spender_address:
            if message:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return
        
        token_contract = USDC_CONTRACT_BASE if token_type == 'usdc' else ETH_CONTRACT
        
        if message:
            progress_msg = await message.answer("üõ°Ô∏è –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ allowance...")
        else:
            progress_msg = None
        
        async def progress_callback(text, progress):
            if progress_msg:
                try:
                    progress_bar = "‚ñà" * (progress // 10) + "‚ñë" * (10 - progress // 10)
                    await progress_msg.edit_text(f"{text}\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {progress}%")
                except Exception:
                    pass
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if network_choice == 'all':
            all_results = []
            for network in NETWORK_PRIORITY:
                await progress_callback(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ {network['name']}...", 0)
                network_results = await scan_allowance_reliable(
                    wallets, token_contract, spender_address, network, progress_callback, user_id=user_id
                )
                all_results.extend(network_results)
        else:
            network = next((n for n in NETWORK_PRIORITY if n['name'].lower() == network_choice), None)
            if network:
                # –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
                all_results = await scan_allowance_reliable(
                    wallets, token_contract, spender_address, network, progress_callback, 
                    user_id=user_id
                )   
            else:
                if message:
                    await message.answer("‚ùå –°–µ—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
        
        # üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢
        if all_results:
            result_text = (
                f"üòà **–ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê**\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"‚Ä¢ üëõ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–æ—à–µ–ª—å–∫–æ–≤: {len(wallets):,}\n"
                f"‚Ä¢ ‚úÖ –ù–∞–π–¥–µ–Ω–æ allowance: {len(all_results):,}\n"
                f"‚Ä¢ üí∏ –ù—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å: {len(wallets) - len(all_results):,}\n"
            )
            
            # –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            excel_file = await export_to_excel(all_results, f"allowance_{network_choice}")
            csv_file = await export_to_csv(all_results, f"allowance_{network_choice}")
            
            if excel_file:
                await message.answer_document(
                    types.BufferedInputFile(
                        excel_file.getvalue(),
                        filename=f"allowance_results_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx"
                    ),
                    caption=result_text,
                    parse_mode="Markdown"
                )
            elif csv_file:
                await message.answer_document(
                    types.BufferedInputFile(
                        csv_file.getvalue(),
                        filename=f"allowance_results_{datetime.now().strftime('%Y%m%d_%H%M')}.csv"
                    ),
                    caption=result_text,
                    parse_mode="Markdown"
                )
            else:
                await message.answer(result_text, parse_mode="Markdown")
                
        else:
            await message.answer(
                f"‚ùå **ALLOWANCE –ù–ï –ù–ê–ô–î–ï–ù**\n\n"
                f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(wallets):,} –∫–æ—à–µ–ª—å–∫–æ–≤\n"
                f"Spender: `{spender_address}`\n"
                f"–¢–æ–∫–µ–Ω: {token_type.upper()}\n"
                f"–°–µ—Ç—å: {network_choice.title()}"
            )
        
    except Exception as e:
        logger.error(f"‚ùå Allowance check error: {e}")
        if message:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}")    

@dp.callback_query(lambda c: c.data.startswith('mode_'))
async def handle_analysis_mode(callback: types.CallbackQuery, state: FSMContext):
    mode = callback.data.replace('mode_', '')
    await state.update_data(analysis_mode=mode)
    
    if mode == 'single':
        await callback.message.edit_text(
            "üîµ **–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:**",
            reply_markup=get_network_selection_keyboard()
        )
        await state.set_state(AnalyzeState.waiting_for_network)
    else:
        await callback.message.edit_text(
            "üíé –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            reply_markup=get_token_selection_keyboard()
        )
        await state.set_state(AnalyzeState.waiting_for_token)
    
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith('network_'))
async def handle_network_selection(callback: types.CallbackQuery, state: FSMContext):
    network_name = callback.data.replace('network_', '').title()
    await state.update_data(network=network_name)
    
    await callback.message.edit_text(
        "üíé –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=get_token_selection_keyboard()
    )
    await state.set_state(AnalyzeState.waiting_for_token)
    await callback.answer()

# ========== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ==========

@dp.message(lambda message: message.text == "üõ†Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
async def diagnostics_command(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    diagnostic_text = "üîß **–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API**\n\n"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Ç–∏
    for network in NETWORK_PRIORITY:
        test_params = {
            'module': 'stats',
            'action': 'ethprice'
        }
        
        data = await make_etherscan_request(network['chain_id'], test_params)
        
        if data and (data.get('status') == '1' or data.get('message') == 'OK'):
            eth_price = data.get('result', {}).get('ethusd', 'N/A')
            diagnostic_text += f"‚úÖ {network['name']}: –†–∞–±–æ—Ç–∞–µ—Ç (ETH: ${eth_price})\n"
        else:
            error_msg = data.get('message', 'Unknown error') if data else 'No response'
            diagnostic_text += f"‚ùå {network['name']}: {error_msg}\n"
    
    await message.answer(diagnostic_text, parse_mode="Markdown")

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ALLOWANCE ==========

@dp.message(lambda message: message.text == "üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ allowance")
async def start_allowance_scan(message: types.Message, state: FSMContext):
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress_data = load_progress(message.from_user.id)
    
    if progress_data:
        # –ï—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä
        
        # –ë–ï–ó–û–ü–ê–°–ù–û–ï –ü–û–õ–£–ß–ï–ù–ò–ï –í–†–ï–ú–ï–ù–ò –ù–ê–ß–ê–õ–ê
        start_time_str = progress_data.get('start_time')
        if start_time_str:
            try:
                start_time = datetime.fromisoformat(start_time_str).strftime('%d.%m %H:%M')
            except (ValueError, TypeError):
                start_time = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        else:
            start_time = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        progress_text = (
            f"üîÑ **–ù–ê–ô–î–ï–ù–ê –ù–ï–ó–ê–í–ï–†–®–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê**\n\n"
            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_data.get('current_index', 0)}/{progress_data.get('total_wallets', 0)} –∫–æ—à–µ–ª—å–∫–æ–≤\n"
            f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(progress_data.get('found_allowances', []))} allowance\n"
            f"üí∏ –ù—É–ª–µ–≤—ã—Ö: {progress_data.get('zero_balance_count', 0)}\n"
            f"üåê –°–µ—Ç—å: {progress_data.get('network', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"üéØ Spender: `{progress_data.get('spender', '')[:10]}...`\n\n"
            f"üíé –¢–æ–∫–µ–Ω: {'USDC' if progress_data.get('token_contract') != ETH_CONTRACT else 'ETH'}\n"
            f"‚è∞ –ù–∞—á–∞—Ç–æ: {start_time}"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É", callback_data="continue_existing_scan")],
            [InlineKeyboardButton(text="üÜï –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É", callback_data="start_new_scan")],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="delete_progress")]
        ])
        
        await message.answer(progress_text, reply_markup=keyboard, parse_mode="Markdown")
        
    else:
        # –ù–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–ª–æ—É
        await message.answer(
            "üí∞ –ü–†–û–í–ï–†–ö–ê ALLOWANCE\n\n"
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–æ—à–µ–ª—å–∫–æ–≤:",
            reply_markup=get_allowance_source_keyboard()
        )
        await state.set_state(AllowanceState.waiting_for_source)

@dp.callback_query(lambda c: c.data.startswith('source_'))
async def handle_allowance_source(callback: types.CallbackQuery, state: FSMContext):
    source = callback.data.replace('source_', '')
    
    if source == 'analysis':
        user_sessions_list = []
        
        # –ò—â–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for sid, data in contract_analysis_results.items():
            if sid.startswith(str(callback.from_user.id)):
                # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏–∑ user_sessions –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
                contract_addr = "Unknown"
                if sid in user_sessions:
                    contract_addr = user_sessions[sid].get('contract_address', 'Unknown')
                
                wallets_count = len(data.get('wallets', []))
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –∞–¥—Ä–µ—Å–∞ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
                short_addr = contract_addr[:10] + "..." + contract_addr[-8:] if contract_addr != "Unknown" else "Unknown"
                user_sessions_list.append(f"`{sid}`: {short_addr} ({wallets_count} –∫–æ—à–µ–ª—å–∫–æ–≤)")
        
        if not user_sessions_list:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞.\n"
                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞."
            )
            return
        
        sessions_text = "\n".join(user_sessions_list[:5])
        await callback.message.edit_text(
            f"üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:**\n\n{sessions_text}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ ID —Å–µ—Å—Å–∏–∏:",
            parse_mode="Markdown"
        )
        await state.set_state(AllowanceState.waiting_for_wallets)
        
    else:
        await callback.message.edit_text(
            "üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤...\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ TXT —Ñ–∞–π–ª —Å –∫–æ—à–µ–ª—å–∫–∞–º–∏ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):\n\n"
            "–ò–ª–∏ CSV —Ñ–∞–π–ª –≤—ã–≥—Ä—É–∑–∫–æ–π –∏–∑ scan "
        )
        await state.set_state(AllowanceState.waiting_for_wallets)
    
    await callback.answer()

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–ê–†–°–ò–ù–ì–ê –§–ê–ô–õ–û–í ==========

def is_valid_wallet_address(address):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º –∫–æ—à–µ–ª—å–∫–∞"""
    if not address or not isinstance(address, str):
        return False
    
    address_clean = address.strip()
    
    return (address_clean.startswith('0x') and 
            len(address_clean) == 42 and 
            all(c in '0123456789abcdefABCDEF' for c in address_clean[2:]))

def extract_wallet_addresses_from_csv(content):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ –∏–∑ CSV –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏"""
    wallets = set()
    original_rows = 0
    
    try:
        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
        lines = content.split('\n')
        original_rows = len([line for line in lines if line.strip()])
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        for delimiter in [',', ';', '\t']:
            csv_reader = csv.reader(StringIO(content), delimiter=delimiter)
            for row_num, row in enumerate(csv_reader):
                if len(row) >= 6:  # –ù—É–∂–Ω—ã –∫–∞–∫ –º–∏–Ω–∏–º—É–º 6 —Å—Ç–æ–ª–±—Ü–æ–≤
                    # –°—Ç–æ–ª–±–µ—Ü From (–∏–Ω–¥–µ–∫—Å 4)
                    if len(row) > 4:
                        from_addr = str(row[4]).strip().strip('"').strip("'")
                        if is_valid_wallet_address(from_addr):
                            wallets.add(from_addr.lower())
                    
                    # –°—Ç–æ–ª–±–µ—Ü To (–∏–Ω–¥–µ–∫—Å 5)
                    if len(row) > 5:
                        to_addr = str(row[5]).strip().strip('"').strip("'")
                        if is_valid_wallet_address(to_addr):
                            wallets.add(to_addr.lower())
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ CSV reader, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏
        if not wallets:
            import re
            address_pattern = re.compile(r'0x[a-fA-F0-9]{40}')
            matches = address_pattern.findall(content)
            wallets.update([match.lower() for match in matches])
        
    except Exception as e:
        logger.error(f"‚ùå Error parsing CSV: {e}")
    
    return list(wallets), original_rows

def parse_wallets_from_content(content, file_name=None):
    """–ü–∞—Ä—Å–∏—Ç –∫–æ—à–µ–ª—å–∫–∏ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞"""
    wallets = []
    
    try:
        if file_name and file_name.lower().endswith('.csv'):
            # CSV —Ñ–∞–π–ª - –ø–∞—Ä—Å–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å–∞ From –∏ To
            csv_reader = csv.reader(StringIO(content))
            
            for row in csv_reader:
                if len(row) >= 6:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–æ–ª–±—Ü–æ–≤
                    # 5-–π —Å—Ç–æ–ª–±–µ—Ü - From (–∏–Ω–¥–µ–∫—Å 4)
                    from_address = row[4].strip().strip('"').strip("'")
                    # 6-–π —Å—Ç–æ–ª–±–µ—Ü - To (–∏–Ω–¥–µ–∫—Å 5)  
                    to_address = row[5].strip().strip('"').strip("'")
                    
                    if is_valid_wallet_address(from_address):
                        wallets.append(from_address.lower())
                    if is_valid_wallet_address(to_address):
                        wallets.append(to_address.lower())
        else:
            # TXT —Ñ–∞–π–ª –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç - –∫–∞–∂–¥—ã–π –∫–æ—à–µ–ª–µ–∫ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
            lines = content.split('\n')
            for line in lines:
                line_clean = line.strip()
                if is_valid_wallet_address(line_clean):
                    wallets.append(line_clean.lower())
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ø—É—Å—Ç—ã–µ –∞–¥—Ä–µ—Å–∞
        wallets = list(set([w for w in wallets if w]))
        
        logger.info(f"‚úÖ [PARSE_WALLETS] Parsed {len(wallets)} wallets from {file_name or 'content'}")
        
    except Exception as e:
        logger.error(f"‚ùå Error parsing wallets from content: {e}")
    
    return wallets   

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ALLOWANCE ==========

@dp.message(AllowanceState.waiting_for_wallets)
async def handle_wallets_input(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        
        if message.document:
            file_info = await bot.get_file(message.document.file_id)
            downloaded_file = await bot.download_file(file_info.file_path)
            
            content = downloaded_file.read().decode('utf-8')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            file_extension = message.document.file_name.lower().split('.')[-1] if message.document.file_name else ''
            
            wallets = []
            
            if file_extension == 'txt' or ('\n' in content and ',' not in content):
                # TXT —Ñ–∞–π–ª - –∫–∞–∂–¥—ã–π –∫–æ—à–µ–ª–µ–∫ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
                wallets = [line.strip() for line in content.split('\n') if line.strip()]
                
            elif file_extension == 'csv' or (',' in content and '\n' in content):
                # CSV —Ñ–∞–π–ª - –ø–∞—Ä—Å–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å–∞ From –∏ To
                csv_reader = csv.reader(StringIO(content))
                
                for row in csv_reader:
                    if len(row) >= 6:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–æ–ª–±—Ü–æ–≤
                        # 5-–π —Å—Ç–æ–ª–±–µ—Ü - From (–∏–Ω–¥–µ–∫—Å 4)
                        from_address = row[4].strip().strip('"').strip("'")
                        # 6-–π —Å—Ç–æ–ª–±–µ—Ü - To (–∏–Ω–¥–µ–∫—Å 5)  
                        to_address = row[5].strip().strip('"').strip("'")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞ From
                        if (from_address.startswith('0x') and 
                            len(from_address) == 42 and 
                            all(c in '0123456789abcdefABCDEF' for c in from_address[2:])):
                            wallets.append(from_address.lower())
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞ To
                        if (to_address.startswith('0x') and 
                            len(to_address) == 42 and 
                            all(c in '0123456789abcdefABCDEF' for c in to_address[2:])):
                            wallets.append(to_address.lower())
            
            else:
                # –ü—Ä–æ–±—É–µ–º –æ–±—â–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
                lines = content.split('\n')
                for line in lines:
                    line_clean = line.strip()
                    if (line_clean.startswith('0x') and 
                        len(line_clean) == 42 and 
                        all(c in '0123456789abcdefABCDEF' for c in line_clean[2:])):
                        wallets.append(line_clean.lower())
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ø—É—Å—Ç—ã–µ –∞–¥—Ä–µ—Å–∞
            wallets = list(set([w for w in wallets if w]))
            
            if not wallets:
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞–ª–∏–¥–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ –≤ —Ñ–∞–π–ª–µ.\n\n"
                    "–î–ª—è CSV —Ñ–∞–π–ª–æ–≤ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–æ–ª–±—Ü—ã —Å –∞–¥—Ä–µ—Å–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 0x... "
                    "–≤ 5-–º –∏ 6-–º —Å—Ç–æ–ª–±—Ü–∞—Ö (From –∏ To)."
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = current_allowance_data.get(user_id, {})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏?
            is_continuation = user_data.get('source') == 'progress'
            
            if is_continuation:
                # –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –°–£–©–ï–°–¢–í–£–Æ–©–ï–ô –ü–†–û–í–ï–†–ö–ò
                progress_data = user_data.get('progress_data', {})
                expected_wallet_count = progress_data.get('total_wallets', 0)
                
                if len(wallets) != expected_wallet_count:
                    await message.answer(
                        f"‚ùå **–ù–ï–°–û–í–ü–ê–î–ï–ù–ò–ï –ö–û–õ–ò–ß–ï–°–¢–í–ê –ö–û–®–ï–õ–¨–ö–û–í**\n\n"
                        f"–û–∂–∏–¥–∞–ª–æ—Å—å: {expected_wallet_count} –∫–æ—à–µ–ª—å–∫–æ–≤\n"
                        f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(wallets)} –∫–æ—à–µ–ª—å–∫–æ–≤\n\n"
                        f"üí° –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª —Å {expected_wallet_count} –∫–æ—à–µ–ª—å–∫–∞–º–∏",
                        parse_mode="Markdown"
                    )
                    return
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—à–µ–ª—å–∫–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                current_allowance_data[user_id]['wallets'] = wallets
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä —Ç–æ–∫–µ–Ω–∞ –∏ —Å–ø–µ–Ω–¥–µ—Ä–∞ - –±–µ—Ä–µ–º –∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                token_type = user_data.get('token_type', 'usdc')
                spender_address = user_data.get('spender')
                network_from_progress = user_data.get('network_from_progress', 'Base')
                current_index = progress_data.get('current_index', 0)
                
                await message.answer(
                    f"‚úÖ **–ü–†–û–í–ï–†–ö–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê**\n\n"
                    f"üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å {current_index}-–≥–æ –∫–æ—à–µ–ª—å–∫–∞\n"
                    f"üìä –í—Å–µ–≥–æ –∫–æ—à–µ–ª—å–∫–æ–≤: {len(wallets)}\n\n"
                    f"üíé –¢–æ–∫–µ–Ω: {token_type.upper()}\n"
                    f"üéØ Spender: `{spender_address}`\n"
                    f"üåê –°–µ—Ç—å: {network_from_progress}",
                    parse_mode="Markdown"
                )
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ —Ç–æ–π –∂–µ —Å–µ—Ç–∏
                network_choice = network_from_progress.lower()
                await start_allowance_check(user_id, network_choice, message)
                return
                
            else:
                # –°–¢–ê–ù–î–ê–†–¢–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê (–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                current_allowance_data[user_id] = {
                    'wallets': wallets,
                    'source': 'file',
                    'file_type': file_extension
                }
                
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(wallets)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –∏–∑ {file_extension.upper()} —Ñ–∞–π–ª–∞")
                
                await message.answer(
                    f"üíé –¢–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ allowance:\n\n"
                    f"üëõ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ—à–µ–ª—å–∫–æ–≤: {len(wallets):,}",
                    reply_markup=get_token_selection_keyboard()
                )
                await state.set_state(AllowanceState.waiting_for_token_allowance)
                
        elif message.text:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ ID —Å–µ—Å—Å–∏–∏ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
            session_id = message.text.strip()
            if session_id in contract_analysis_results:
                data = contract_analysis_results[session_id]
                wallets = data.get('wallets', [])
                if wallets:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                    current_allowance_data[user_id] = {
                        'wallets': wallets,
                        'source': 'analysis',
                        'session_id': session_id
                    }
                    logger.info(f"‚úÖ [ALLOWANCE] Loaded {len(wallets)} wallets for user {user_id}")
                    
                    await message.answer(
                        f"üíé **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ allowance:**\n\n"
                        f"üëõ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ—à–µ–ª—å–∫–æ–≤: {len(wallets):,}",
                        reply_markup=get_token_selection_keyboard()
                    )
                    await state.set_state(AllowanceState.waiting_for_token_allowance)
                else:
                    await message.answer("‚ùå –í —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é:")
                    return
            else:
                await message.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
        
        else:
            await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ TXT/CSV —Ñ–∞–π–ª –∏–ª–∏ ID —Å–µ—Å—Å–∏–∏:")
            return
        
    except Exception as e:
        logger.error(f"‚ùå Error in handle_wallets_input: {e}")
        import traceback
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—à–µ–ª—å–∫–æ–≤. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")

@dp.callback_query(AllowanceState.waiting_for_token_allowance)
async def handle_allowance_token_selection(callback: types.CallbackQuery, state: FSMContext):
    try:
        user_id = callback.from_user.id
        token_type = callback.data.replace('token_', '')
        
        logger.info(f"üîß [ALLOWANCE_TOKEN] START - User: {user_id}, Token: {token_type}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.info(f"üîß [ALLOWANCE_TOKEN] Global data keys: {list(current_allowance_data.keys())}")
        
        user_data = current_allowance_data.get(user_id, {})
        wallets = user_data.get('wallets', [])
        session_id = user_data.get('session_id')
        
        logger.info(f"üîß [ALLOWANCE_TOKEN] User data: {user_data}, Wallets count: {len(wallets)}")
        
        # –ï—Å–ª–∏ wallets –ø—É—Å—Ç—ã–µ, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        if not wallets:
            logger.warning("‚ö†Ô∏è [ALLOWANCE_TOKEN] No wallets in global data, attempting recovery...")
            
            # –°–ø–æ—Å–æ–± 1: –ò–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
            state_data = await state.get_data()
            logger.info(f"üîß [ALLOWANCE_TOKEN] State data: {state_data}")
            
            # –°–ø–æ—Å–æ–± 2: –ò–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_sessions_list = [
                sid for sid in contract_analysis_results.keys() 
                if sid.startswith(str(user_id))
            ]
            logger.info(f"üîß [ALLOWANCE_TOKEN] User sessions: {user_sessions_list}")
            
            if user_sessions_list:
                last_session = user_sessions_list[-1]
                session_data = contract_analysis_results[last_session]
                wallets = session_data.get('wallets', [])
                session_id = last_session
                
                if wallets:
                    logger.info(f"‚úÖ [ALLOWANCE_TOKEN] Recovered {len(wallets)} wallets from last session: {last_session}")
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    current_allowance_data[user_id] = {
                        'wallets': wallets,
                        'source': 'analysis', 
                        'session_id': session_id,
                        'token_type': token_type
                    }
        
        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç wallets - –æ—à–∏–±–∫–∞
        if not wallets:
            logger.error(f"‚ùå [ALLOWANCE_TOKEN] No wallets found after all recovery attempts")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ—à–µ–ª—å–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        current_allowance_data[user_id]['token_type'] = token_type
        
        logger.info(f"‚úÖ [ALLOWANCE_TOKEN] SUCCESS - User {user_id}: {len(wallets)} wallets, token: {token_type}")
        
        await callback.message.edit_text(
            f"üîç **–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å spender –¥–ª—è {token_type.upper()}:**\n\n"
            f"üëõ –ö–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(wallets):,}\n\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:",
            parse_mode="Markdown"
        )
        await state.set_state(AllowanceState.waiting_for_spender)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"‚ùå [ALLOWANCE_TOKEN] CRITICAL ERROR: {e}")
        import traceback
        logger.error(f"‚ùå [ALLOWANCE_TOKEN] Traceback: {traceback.format_exc()}")
        await callback.answer(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@dp.message(AllowanceState.waiting_for_spender)
async def handle_spender_address(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        spender_address = message.text.strip()
        
        if not (spender_address.startswith('0x') and len(spender_address) == 42):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = current_allowance_data.get(user_id, {})
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        user_data['spender'] = spender_address
        current_allowance_data[user_id] = user_data
        
        logger.info(f"‚úÖ [SPENDER] User {user_id} set spender: {spender_address}")
        logger.info(f"‚úÖ [SPENDER] User data keys: {list(user_data.keys())}")
        
        await message.answer(
            "üåê –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ allowance:\n\n"
            "‚Ä¢ üîµ Base\n"
            "‚Ä¢ üî∑ Arbitrum  \n"
            "‚Ä¢ üü† Optimism\n"
            "‚Ä¢ üåê –í—Å–µ —Å–µ—Ç–∏ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)",
            reply_markup=get_network_selection_keyboard_allowance()
        )
        
    except Exception as e:
        logger.error(f"‚ùå Error in handle_spender_address: {e}")
        import traceback
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.callback_query(lambda c: c.data.startswith('allowance_network_'))
async def handle_allowance_network_selection(callback: types.CallbackQuery, state: FSMContext):
    try:
        user_id = callback.from_user.id
        network_choice = callback.data.replace('allowance_network_', '')
        
        # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å "query is too old"
        await callback.answer("üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        user_data = current_allowance_data.get(user_id, {})
        wallets = user_data.get('wallets', [])
        token_type = user_data.get('token_type', 'usdc')
        spender_address = user_data.get('spender')
        
        if not wallets or not spender_address:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return
        
        token_contract = USDC_CONTRACT_BASE if token_type == 'usdc' else ETH_CONTRACT
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ
        progress_msg = await callback.message.answer("üõ°Ô∏è –ó–∞–ø—É—Å–∫ –Ω–∞–¥–µ–∂–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ allowance...")
        
        async def progress_callback(text, progress):
            try:
                progress_bar = "‚ñà" * (progress // 10) + "‚ñë" * (10 - progress // 10)
                await progress_msg.edit_text(f"{text}\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {progress}%")
            except Exception as e:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                if "message is not modified" in str(e):
                    pass
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if network_choice == 'all':
            all_results = []
            for network in NETWORK_PRIORITY:
                await progress_callback(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ {network['name']}...", 0)
                network_results = await scan_allowance_reliable(
                    wallets, token_contract, spender_address, network, progress_callback, user_id=callback.from_user.id
                )
                all_results.extend(network_results)
        else:
            network = next((n for n in NETWORK_PRIORITY if n['name'].lower() == network_choice), None)
            if network:
                all_results = await scan_allowance_reliable(
                    wallets, token_contract, spender_address, network, progress_callback, user_id=callback.from_user.id
                )   
            else:
                await callback.message.answer("‚ùå –°–µ—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
        
        # üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢
        if all_results:
            result_text = (
                f"üòà **–ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê**\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"‚Ä¢ üëõ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–æ—à–µ–ª—å–∫–æ–≤: {len(wallets):,}\n"
                f"‚Ä¢ ‚úÖ –ù–∞–π–¥–µ–Ω–æ allowance: {len(all_results):,}\n"
                f"‚Ä¢ üí∏ –ù—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å: {len(wallets) - len(all_results):,}\n"
            )
            
            # –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            excel_file = await export_to_excel(all_results, f"allowance_{network_choice}")
            csv_file = await export_to_csv(all_results, f"allowance_{network_choice}")
            
            if excel_file:
                await callback.message.answer_document(
                    types.BufferedInputFile(
                        excel_file.getvalue(),
                        filename=f"allowance_results_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx"
                    ),
                    caption=result_text,
                    parse_mode="Markdown"
                )
            elif csv_file:
                await callback.message.answer_document(
                    types.BufferedInputFile(
                        csv_file.getvalue(),
                        filename=f"allowance_results_{datetime.now().strftime('%Y%m%d_%H%M')}.csv"
                    ),
                    caption=result_text,
                    parse_mode="Markdown"
                )
            else:
                await callback.message.answer(result_text, parse_mode="Markdown")
                
        else:
            await callback.message.answer(
                f"‚ùå **ALLOWANCE –ù–ï –ù–ê–ô–î–ï–ù**\n\n"
                f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(wallets):,} –∫–æ—à–µ–ª—å–∫–æ–≤\n"
                f"Spender: `{spender_address}`\n"
                f"–¢–æ–∫–µ–Ω: {token_type.upper()}\n"
                f"–°–µ—Ç—å: {network_choice.title()}"
            )
        
    except Exception as e:
        logger.error(f"‚ùå Allowance scan error: {e}")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}")

@dp.callback_query(lambda c: c.data in ["continue_existing_scan", "start_new_scan", "delete_progress"])
async def handle_continue_scan_choice(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    
    if callback.data == "continue_existing_scan":
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        progress_data = load_progress(user_id)
        
        if not progress_data:
            await callback.answer("‚ùå –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        current_allowance_data[user_id] = {
            'wallets': [],  # –ö–æ—à–µ–ª—å–∫–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–Ω–æ–≤–æ
            'source': 'progress',
            'token_type': 'usdc' if progress_data['token_contract'] != ETH_CONTRACT else 'eth',
            'spender': progress_data['spender'],
            'progress_data': progress_data,
            'network_from_progress': progress_data['network']
        }
        
        await callback.message.edit_text(
            f"üîÑ **–ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –ü–†–û–í–ï–†–ö–ò**\n\n"
            f"–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª —Å {progress_data['total_wallets']} –∫–æ—à–µ–ª—å–∫–∞–º–∏\n"
            f"–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å {progress_data['current_index']}-–≥–æ –∫–æ—à–µ–ª—å–∫–∞\n\n"
            f"üí° **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**\n"
            f"‚Ä¢ –°–µ—Ç—å: {progress_data['network']}\n"
            f"‚Ä¢ –¢–æ–∫–µ–Ω: {'USDC' if progress_data['token_contract'] != ETH_CONTRACT else 'ETH'}\n"
            f"‚Ä¢ Spender: `{progress_data['spender']}`",
            parse_mode="Markdown"
        )
        await state.set_state(AllowanceState.waiting_for_wallets)
        
    elif callback.data == "start_new_scan":
        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        await callback.message.edit_text(
            "üí∞ –ü–†–û–í–ï–†–ö–ê ALLOWANCE\n\n"
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–æ—à–µ–ª—å–∫–æ–≤:",
            reply_markup=get_allowance_source_keyboard()
        )
        await state.set_state(AllowanceState.waiting_for_source)
        
    elif callback.data == "delete_progress":
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        delete_progress(user_id)
        await callback.message.edit_text(
            "üóëÔ∏è **–ü–†–û–ì–†–ï–°–° –£–î–ê–õ–ï–ù**\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É:",
            reply_markup=get_allowance_source_keyboard()
        )
        await state.set_state(AllowanceState.waiting_for_source)
    
    await callback.answer()

@dp.callback_query()
async def debug_all_callbacks(callback: types.CallbackQuery, state: FSMContext):
    """–í—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—Å–µ—Ö callback"""
    logger.info(f"üîß [DEBUG_CALLBACK] Data: {callback.data}, State: {await state.get_state()}")
    user_data = await state.get_data()
    logger.info(f"üîß [DEBUG_CALLBACK] User data: {user_data}")
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ–∫–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    if callback.data.startswith('token_') and await state.get_state() == AnalyzeState.waiting_for_token:
        await handle_analysis_token_selection(callback, state)
    # –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ–∫–µ–Ω –¥–ª—è allowance
    elif callback.data.startswith('token_') and await state.get_state() == AllowanceState.waiting_for_token_allowance:
        await handle_allowance_token_selection(callback, state)
    else:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

# –î–æ–±–∞–≤—å —ç—Ç–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
async def handle_analysis_token_selection(callback: types.CallbackQuery, state: FSMContext):
    """–í—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ"""
    try:
        logger.info(f"üîß [ANALYSIS_TOKEN] Starting analysis for token: {callback.data}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if 'contract_address' not in user_data:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
            await state.clear()
            return
            
        contract_address = user_data['contract_address']
        analysis_mode = user_data.get('analysis_mode', 'single')
        network_name = user_data.get('network', 'Base')
        
        token_type = callback.data.replace('token_', '')
        
        session_id = f"{callback.from_user.id}_{int(time.time())}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ user_sessions —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        user_sessions[session_id] = {
            'contract_address': contract_address,
            'token_type': token_type,
            'analysis_mode': analysis_mode,
            'network': network_name
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        last_user_sessions[callback.from_user.id] = session_id
        logger.info(f"üíæ [SESSION_DEBUG] Saved last session for user {callback.from_user.id}: {session_id}")
        
        progress_msg = await callback.message.edit_text("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...")
        
        async def progress_callback(text, progress):
            try:
                progress_bar = "‚ñà" * (progress // 10) + "‚ñë" * (10 - progress // 10)
                await progress_msg.edit_text(
                    f"üîÑ {text}\n\n"
                    f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {progress}%"
                )
            except:
                pass
        
        try:
            if analysis_mode == 'all':
                wallets, total_tx = await analyze_contract_all_networks(
                    contract_address, token_type, progress_callback
                )
            else:
                wallets, total_tx = await analyze_contract_single_network(
                    contract_address, network_name, token_type, progress_callback
                )
            
            contract_analysis_results[session_id] = {
                'wallets': wallets,
                'total_transactions': total_tx,
                'timestamp': datetime.now().isoformat()
            }
            
            result_text = (
                f"‚úÖ **–ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù**\n\n"
                f"üìÑ –ö–æ–Ω—Ç—Ä–∞–∫—Ç: `{contract_address}`\n"
                f"üåê –†–µ–∂–∏–º: {'–í—Å–µ —Å–µ—Ç–∏' if analysis_mode == 'all' else network_name}\n"
                f"üíé –¢–æ–∫–µ–Ω: {token_type.upper()}\n"
                f"üëõ –ù–∞–π–¥–µ–Ω–æ –∫–æ—à–µ–ª—å–∫–æ–≤: {len(wallets):,}\n"
                f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total_tx:,}\n\n"
                f"üí° –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ allowance"
            )
            
            await progress_msg.edit_text(result_text, parse_mode="Markdown")
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∫–∞—á–∞—Ç—å –∫–æ—à–µ–ª—å–∫–∏ –≤ TXT —Ñ–æ—Ä–º–∞—Ç–µ
            if wallets:
                txt_file = await export_wallets_to_txt(wallets, f"wallets_{session_id}")
                if txt_file:
                    await callback.message.answer_document(
                        types.BufferedInputFile(
                            txt_file.getvalue(),
                            filename=f"wallets_{network_name}_{datetime.now().strftime('%Y%m%d_%H%M')}.txt"
                        ),
                        caption="üìù –°–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)"
                    )
                else:
                    await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å –∫–æ—à–µ–ª—å–∫–∞–º–∏")
            else:
                await callback.message.answer("‚ÑπÔ∏è –ö–æ—à–µ–ª—å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            
        except Exception as e:
            logger.error(f"Analysis error: {e}")
            await progress_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        
        await state.clear()
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Token selection error: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        await state.clear()

# ========== –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ ==========

@dp.message(Command("deep_debug"))
async def deep_debug_command(message: types.Message):
    """–ì–ª—É–±–æ–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ endpoints"""
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    test_wallet = "0x0bD785D8ab76dE1595e595DBc12eF337cc49Ed72"
    test_spender = "0xdf4ff5122170fe28a750d3a1d2b65bb202dd0dd2"
    test_token = "0x833589fCD6eDb6E08f4c7c32D4f71b54bdA02913"
    
    await message.answer("üî¨ **–ì–õ–£–ë–û–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê**\n\n–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏...")
    
    debug_results = []
    
    # –ú–µ—Ç–æ–¥ 1: Basescan API –Ω–∞–ø—Ä—è–º—É—é
    try:
        params = {
            'module': 'account',
            'action': 'tokenallowance',
            'contractaddress': test_token,
            'address': test_wallet,
            'spender': test_spender,
            'apikey': BASESCAN_API_KEY
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.get(BASESCAN_API_URL, params=params, timeout=30) as response:
                response_text = await response.text()
                debug_results.append(f"üîπ **Basescan Direct**:\n–°—Ç–∞—Ç—É—Å: {response.status}\n–û—Ç–≤–µ—Ç: {response_text}")
                
    except Exception as e:
        debug_results.append(f"üîπ **Basescan Direct**: –û—à–∏–±–∫–∞ - {str(e)}")
    
    # –ú–µ—Ç–æ–¥ 2: Etherscan V2 API
    try:
        params = {
            'module': 'account',
            'action': 'tokenallowance',
            'contractaddress': test_token,
            'address': test_wallet,
            'spender': test_spender,
            'chainid': BASE_CHAIN_ID,
            'apikey': ETHERSCAN_API_KEY
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.get(ETHERSCAN_V2_API_URL, params=params, timeout=30) as response:
                response_text = await response.text()
                debug_results.append(f"üîπ **Etherscan V2**:\n–°—Ç–∞—Ç—É—Å: {response.status}\n–û—Ç–≤–µ—Ç: {response_text}")
                
    except Exception as e:
        debug_results.append(f"üîπ **Etherscan V2**: –û—à–∏–±–∫–∞ - {str(e)}")
    
    # –ú–µ—Ç–æ–¥ 3: –ü—Ä—è–º–æ–π RPC –≤—ã–∑–æ–≤ (–∏–º–∏—Ç–∞—Ü–∏—è web3)
    try:
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ allowance(owner, spender)
        data_payload = "0xdd62ed3e" + test_wallet[2:].zfill(64) + test_spender[2:].zfill(64)
        
        params = {
            'module': 'proxy',
            'action': 'eth_call',
            'to': test_token,
            'data': data_payload,
            'tag': 'latest',
            'apikey': BASESCAN_API_KEY
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.get(BASESCAN_API_URL, params=params, timeout=30) as response:
                response_text = await response.text()
                debug_results.append(f"üîπ **Direct Contract Call**:\n–°—Ç–∞—Ç—É—Å: {response.status}\n–û—Ç–≤–µ—Ç: {response_text}")
                
    except Exception as e:
        debug_results.append(f"üîπ **Direct Contract Call**: –û—à–∏–±–∫–∞ - {str(e)}")
    
    # –ú–µ—Ç–æ–¥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint
    try:
        params = {
            'module': 'account',
            'action': 'tokenallowance',
            'contractaddress': test_token,
            'address': test_wallet,
            'spender': test_spender,
            'apikey': ETHERSCAN_API_KEY
        }
        
        # –ü—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–π endpoint
        alt_url = "https://api.basescan.org/api"
        async with aiohttp.ClientSession() as session:
            async with session.get(alt_url, params=params, timeout=30) as response:
                response_text = await response.text()
                debug_results.append(f"üîπ **Alternative Basescan**:\n–°—Ç–∞—Ç—É—Å: {response.status}\n–û—Ç–≤–µ—Ç: {response_text}")
                
    except Exception as e:
        debug_results.append(f"üîπ **Alternative Basescan**: –û—à–∏–±–∫–∞ - {str(e)}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    result_text = "üî¨ **–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ì–õ–£–ë–û–ö–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:**\n\n"
    result_text += "\n\n".join(debug_results)
    
    # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    if len(result_text) > 4000:
        result_text = result_text[:4000] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"
    
    await message.answer(f"```\n{result_text}\n```", parse_mode="Markdown")

@dp.message(Command("check_balance"))
async def check_balance_command(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –±–∞–ª–∞–Ω—Å–∞"""
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    test_wallet = "0x0bD785D8ab76dE1595e595DBc12eF337cc49Ed72"
    test_token = "0x833589fCD6eDb6E08f4c7c32D4f71b54bdA02913"
    
    await message.answer("üí∞ **–ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê**\n\n–ó–∞–ø—Ä–æ—Å...")
    
    try:
        params = {
            'module': 'account',
            'action': 'tokenbalance',
            'contractaddress': test_token,
            'address': test_wallet,
            'tag': 'latest',
            'apikey': BASESCAN_API_KEY
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.get(BASESCAN_API_URL, params=params, timeout=30) as response:
                response_text = await response.text()
                data = json.loads(response_text)
                
                if data.get('status') == '1':
                    balance_raw = data.get('result', '0')
                    balance = int(balance_raw) / (10 ** 6)
                    result_text = f"‚úÖ **–ë–ê–õ–ê–ù–° –ù–ê–ô–î–ï–ù:**\n\nüí∞ {balance:.6f} USDC\n\nüìä Raw: {balance_raw}"
                else:
                    result_text = f"‚ùå **–û–®–ò–ë–ö–ê:**\n\n{data}"
                    
                await message.answer(f"```\n{result_text}\n```", parse_mode="Markdown")
                
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command("test_v2"))
async def test_v2_command(message: types.Message):
    """–¢–µ—Å—Ç V2 API"""
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    test_wallet = "0x0bD785D8ab76dE1595e595DBc12eF337cc49Ed72"
    test_token = "0x833589fCD6eDb6E08f4c7c32D4f71b54bdA02913"
    
    await message.answer("üß™ **–¢–ï–°–¢ V2 API**\n\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ V2...")
    
    try:
        params = {
            'module': 'account',
            'action': 'tokenbalance',
            'contractaddress': test_token,
            'address': test_wallet,
            'tag': 'latest'
        }
        
        data = await make_etherscan_request(BASE_CHAIN_ID, params)
        
        if data:
            result_text = f"üìä **V2 API –û–¢–í–ï–¢:**\n\n```json\n{json.dumps(data, indent=2)}\n```"
            
            if data.get('status') == '1' or data.get('message') == 'OK':
                balance_raw = data.get('result', '0')
                balance = int(balance_raw) / (10 ** 6)
                result_text += f"\n\n‚úÖ **–ë–ê–õ–ê–ù–°:** {balance:.6f} USDC"
            else:
                result_text += f"\n\n‚ùå **–û–®–ò–ë–ö–ê:** {data.get('message')}"
        else:
            result_text = "‚ùå **–ù–ï–¢ –û–¢–í–ï–¢–ê –û–¢ API**"
            
        await message.answer(result_text, parse_mode="Markdown")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command("check_max_allowance"))
async def check_max_allowance_command(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ MAX_UINT256 allowance"""
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    test_wallet = "0x0bD785D8ab76dE1595e595DBc12eF337cc49Ed72"
    test_spender = "0xdf4ff5122170fe28a750d3a1d2b65bb202dd0dd2"
    test_token = "0x833589fCD6eDb6E08f4c7c32D4f71b54bdA02913"
    
    await message.answer("üîç **–ü–†–û–í–ï–†–ö–ê MAX ALLOWANCE**\n\n–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ...")
    
    MAX_UINT256 = 115792089237316195423570985008687907853269984665640564039457584007913129639935
    
    try:
        # –ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        data_payload = "0xdd62ed3e" + test_wallet[2:].zfill(64) + test_spender[2:].zfill(64)
        
        params = {
            'module': 'proxy',
            'action': 'eth_call',
            'to': test_token,
            'data': data_payload,
            'tag': 'latest'
        }
        
        data = await make_etherscan_request(BASE_CHAIN_ID, params)
        
        if data and data.get('result'):
            result_hex = data['result']
            
            if result_hex != '0x':
                allowance_raw = int(result_hex, 16)
                allowance_usd = allowance_raw / (10 ** 6)
                
                result_text = f"üîπ **–ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞**:\n"
                result_text += f"Hex —Ä–µ–∑—É–ª—å—Ç–∞—Ç: `{result_hex}`\n"
                result_text += f"–ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: `{allowance_raw}`\n"
                result_text += f"USDC –∑–Ω–∞—á–µ–Ω–∏–µ: `{allowance_usd:.6f}`\n\n"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ MAX_UINT256
                if allowance_raw == MAX_UINT256:
                    result_text += f"üéØ **–≠–¢–û MAX_UINT256!**\n"
                    result_text += f"‚úÖ **–ë–ï–°–ö–û–ù–ï–ß–ù–´–ô ALLOWANCE**\n\n"
                    result_text += f"üí° –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ spender –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –í–°–ï USDC —ç—Ç–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞\n"
                elif allowance_raw > 0:
                    result_text += f"‚úÖ **ALLOWANCE –ù–ê–ô–î–ï–ù**: {allowance_usd:,.2f} USDC\n"
                else:
                    result_text += f"‚ùå **ALLOWANCE –ù–ï –ù–ê–ô–î–ï–ù**\n"
            else:
                result_text = f"‚ùå **–ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞**: {result_hex}"
        else:
            error_msg = data.get('message', 'No data') if data else 'No response'
            result_text = f"‚ùå **–û—à–∏–±–∫–∞ API**: {error_msg}"
            
        await message.answer(result_text, parse_mode="Markdown")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command("test_rpc"))
async def test_rpc_command(message: types.Message):
    """–¢–µ—Å—Ç RPC –º–µ—Ç–æ–¥–∞"""
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    test_wallet = "0x0bD785D8ab76dE1595e595DBc12eF337cc49Ed72"
    test_spender = "0xdf4ff5122170fe28a750d3a1d2b65bb202dd0dd2"
    test_token = "0x833589fCD6eDb6E08f4c7c32D4f71b54bdA02913"
    
    await message.answer("üîß **–¢–ï–°–¢ RPC –ú–ï–¢–û–î–ê**\n\n–ü—Ä–æ–≤–µ—Ä–∫–∞ allowance —á–µ—Ä–µ–∑ Base RPC...")
    
    try:
        result = await get_allowance_via_rpc(test_wallet, test_token, test_spender)
        
        if result > 0:
            result_text = f"‚úÖ **RPC ALLOWANCE –ù–ê–ô–î–ï–ù:** {result:.6f} USDC\n\n"
            result_text += f"üí° –ö–æ—à–µ–ª–µ–∫: `{test_wallet}`\n"
            result_text += f"üí° Spender: `{test_spender}`\n"
            result_text += f"üí° –¢–æ–∫–µ–Ω: `{test_token}`"
        else:
            result_text = f"‚ùå **RPC ALLOWANCE –ù–ï –ù–ê–ô–î–ï–ù**\n\n"
            result_text += f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–æ–≤ –∏ –Ω–∞–ª–∏—á–∏–µ allowance"
            
        await message.answer(result_text, parse_mode="Markdown")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ RPC: {str(e)}")

async def get_allowance_reliable(wallet_address, token_contract, spender_address, chain_id, max_retries=3):
    """–°–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ allowance - —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ RPC"""
    for attempt in range(max_retries):
        try:
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            if attempt > 0:
                wait_time = attempt * 1.0
                logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt} –¥–ª—è {wallet_address[:8]}..., –ø–∞—É–∑–∞ {wait_time}—Å")
                await asyncio.sleep(wait_time)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º RPC –≤—ã–∑–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ç–µ–π
            if chain_id == BASE_CHAIN_ID:
                # –î–ª—è Base –∏—Å–ø–æ–ª—å–∑—É–µ–º Base RPC
                allowance = await get_allowance_via_rpc(wallet_address, token_contract, spender_address)
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–µ—Ç–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É —á–µ—Ä–µ–∑ Etherscan proxy
                allowance = await get_allowance_direct(wallet_address, token_contract, spender_address, chain_id)
            
            if allowance > 0:
                logger.info(f"‚úÖ [ALLOWANCE_FOUND] {wallet_address[:8]}...: {allowance:.6f} USDC")
                return allowance
            else:
                logger.info(f"‚ÑπÔ∏è [NO_ALLOWANCE] {wallet_address[:8]}...: 0 USDC")
                return 0
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {wallet_address[:8]}... (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {e}")
            continue
    
    logger.error(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å –¥–ª—è {wallet_address[:8]}...")
    return 0

async def scan_allowance_reliable(wallets, token_contract, spender_address, network, progress_callback=None, user_id=None, progress_data=None):
    """–ù–∞–¥–µ–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –í–°–ï–• –∫–æ—à–µ–ª—å–∫–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é"""
    
    # –°–æ–∑–¥–∞–µ–º ID —Å–µ—Å—Å–∏–∏
    session_id = f"{user_id}_{int(time.time())}" if user_id else f"session_{int(time.time())}"
    total_wallets = len(wallets)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ò–õ–ò –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    if progress_data:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
        current_index = progress_data.get('current_index', 0)
        found_results = progress_data.get('found_allowances', [])
        checked_wallets = set(progress_data.get('checked_wallets', []))
        zero_balance_count = progress_data.get('zero_balance_count', 0)
        api_errors = progress_data.get('api_errors', 0)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏
        remaining_wallets = [w for i, w in enumerate(wallets) if i >= current_index]
        
        logger.info(f"üîÑ –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï: –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å {current_index}-–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –∏–∑ {total_wallets}")
        start_from_scratch = False
        
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ñ–∞–π–ª–µ
        saved_progress = load_progress(user_id) if user_id else None
        
        if saved_progress and saved_progress.get('session_id') == session_id:
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –º–µ—Å—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
            current_index = saved_progress['current_index']
            found_results = saved_progress['found_allowances']
            checked_wallets = set(saved_progress['checked_wallets'])
            zero_balance_count = saved_progress.get('zero_balance_count', 0)
            api_errors = saved_progress.get('api_errors', 0)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏
            remaining_wallets = [w for i, w in enumerate(wallets) if i >= current_index]
            
            logger.info(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å: {current_index}/{total_wallets} –∫–æ—à–µ–ª—å–∫–æ–≤")
            start_from_scratch = False
        else:
            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            current_index = 0
            found_results = []
            checked_wallets = set()
            remaining_wallets = wallets
            zero_balance_count = 0
            api_errors = 0
            start_from_scratch = True
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            if user_id:
                initial_progress = {
                    'session_id': session_id,
                    'user_id': user_id,
                    'total_wallets': total_wallets,
                    'current_index': 0,
                    'found_allowances': [],
                    'checked_wallets': [],
                    'failed_wallets': [],
                    'zero_balance_count': 0,
                    'api_errors': 0,
                    'start_time': datetime.now().isoformat(),
                    'spender': spender_address,
                    'token_contract': token_contract,
                    'network': network['name']
                }
                save_progress(user_id, initial_progress)
    
    processed_count = current_index
    
    logger.info(f"üõ°Ô∏è [RELIABLE_SCAN] –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ {len(remaining_wallets)} –∫–æ—à–µ–ª—å–∫–æ–≤ –≤ {network['name']}")
    
    try:
        for i, wallet in enumerate(remaining_wallets):
            global_index = current_index + i
            
            # üîß –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –¥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è
            if global_index % 20 == 0:
                await asyncio.sleep(0.05)
            
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ CACHE_SAVE_INTERVAL –∫–æ—à–µ–ª—å–∫–æ–≤
                if global_index % CACHE_SAVE_INTERVAL == 0 and user_id:
                    save_progress(user_id, {
                        'session_id': session_id,
                        'user_id': user_id,
                        'total_wallets': total_wallets,
                        'current_index': global_index,
                        'found_allowances': found_results,
                        'checked_wallets': list(checked_wallets),
                        'failed_wallets': [],
                        'zero_balance_count': zero_balance_count,
                        'api_errors': api_errors,
                        'spender': spender_address,
                        'token_contract': token_contract,
                        'network': network['name']
                    })
                
                # –û–±–Ω–æ–≤–ª—è–µ–º UI –ø—Ä–æ–≥—Ä–µ—Å—Å
                if progress_callback and i % 10 == 0:
                    progress = int((global_index / total_wallets) * 100)
                    status = (f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {global_index}/{total_wallets}\n"
                             f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(found_results)}\n"
                             f"üí∏ –ù—É–ª–µ–≤—ã—Ö: {zero_balance_count}")
                    await progress_callback(status, progress)
                
                # üîß –î–ï–ë–ê–ì: –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ—à–µ–ª—å–∫–∞
                logger.info(f"üîç [WALLET_START] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—à–µ–ª—å–∫–∞ {i+1}/{len(remaining_wallets)}: {wallet[:8]}...")
                
                # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Å retry
                is_eth = (token_contract == ETH_CONTRACT)
                logger.info(f"üîç [BALANCE_CHECK] –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è {wallet[:8]}...")
                balance = await get_token_balance_with_retry(wallet, token_contract, network['chain_id'], is_eth)
                logger.info(f"üîç [BALANCE_RESULT] {wallet[:8]}...: –±–∞–ª–∞–Ω—Å = {balance:.6f}")
                
                if balance <= 0:
                    logger.info(f"üîç [ZERO_BALANCE] {wallet[:8]}...: –Ω—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    zero_balance_count += 1
                    processed_count += 1
                    checked_wallets.add(wallet)
                    continue
                
                # üîß –î–ï–ë–ê–ì: –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ allowance
                logger.info(f"üîç [ALLOWANCE_CHECK] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É allowance –¥–ª—è {wallet[:8]}... –≤ {network['name']} (chain_id: {network['chain_id']})")
                
                # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º allowance —Å retry - –î–õ–Ø –í–°–ï–• –°–ï–¢–ï–ô!
                if is_eth:
                    allowance = balance  # –î–ª—è ETH allowance = –±–∞–ª–∞–Ω—Å
                    logger.info(f"üîç [ETH_ALLOWANCE] {wallet[:8]}...: ETH, allowance = –±–∞–ª–∞–Ω—Å = {balance:.6f}")
                else:
                    # üîß –î–õ–Ø –í–°–ï–• –°–ï–¢–ï–ô –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–†–Ø–ú–û–ô –í–´–ó–û–í –ö–û–ù–¢–†–ê–ö–¢–ê –ß–ï–†–ï–ó RPC
                    if network['chain_id'] == BASE_CHAIN_ID:
                        # –î–ª—è Base –∏—Å–ø–æ–ª—å–∑—É–µ–º Base RPC
                        allowance = await get_allowance_via_rpc(wallet, token_contract, spender_address)
                    elif network['chain_id'] == ARBITRUM_CHAIN_ID:
                        # –î–ª—è Arbitrum –∏—Å–ø–æ–ª—å–∑—É–µ–º Arbitrum RPC
                        correct_token_contract = USDC_CONTRACT_ARBITRUM  # 0xaf88d065e77c8cC2239327C5EDb3A432268e5831
                        allowance = await get_allowance_via_arbitrum_rpc(wallet, correct_token_contract, spender_address)
                    elif network['chain_id'] == OPTIMISM_CHAIN_ID:
                        # –î–ª—è Optimism –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ (–ø–æ–∫–∞)
                        allowance = await get_token_allowance(wallet, token_contract, spender_address, network['chain_id'])
                    else:
                        # Fallback - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥
                        allowance = await get_token_allowance(wallet, token_contract, spender_address, network['chain_id'])
                    logger.info(f"üîç [USDC_ALLOWANCE_RESULT] {wallet[:8]}...: allowance = {allowance:.6f}")
                
                if allowance > 0:
                    result = {
                        'address': wallet,
                        'allowance': allowance,
                        'balance': balance,
                        'available': min(allowance, balance),
                        'network': network['name']
                    }
                    found_results.append(result)
                    logger.info(f"üéØ [SUCCESS] {wallet[:8]}...: {allowance:.6f} USDC (–±–∞–ª–∞–Ω—Å: {balance:.6f})")
                else:
                    logger.info(f"üîç [NO_ALLOWANCE] {wallet[:8]}...: allowance –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Ä–∞–≤–µ–Ω 0")
                
                processed_count += 1
                checked_wallets.add(wallet)
                
                # üîß –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∫–æ—à–µ–ª—å–∫–∞–º–∏
                pause_time = 0.3
                if i % 5 == 0:
                    await asyncio.sleep(pause_time)
                    
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {wallet[:8]}...: {e}")
                api_errors += 1
                processed_count += 1
                checked_wallets.add(wallet)
                continue
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info(f"üìä [RELIABLE_SCAN] –ò–¢–û–ì–û: "
                   f"–ö–æ—à–µ–ª—å–∫–æ–≤={total_wallets}, "
                   f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ={processed_count}, "
                   f"–ù–∞–π–¥–µ–Ω–æ={len(found_results)}, "
                   f"–ù—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å={zero_balance_count}, "
                   f"–û—à–∏–±–∫–∏={api_errors}")
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if user_id:
            delete_progress(user_id)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        found_results.sort(key=lambda x: x['allowance'], reverse=True)
        for i, result in enumerate(found_results):
            result['rank'] = i + 1
        
        return found_results
        
    except asyncio.CancelledError:
        logger.info("üî¥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏
        if user_id:
            save_progress(user_id, {
                'session_id': session_id,
                'user_id': user_id,
                'total_wallets': total_wallets,
                'current_index': processed_count,
                'found_allowances': found_results,
                'checked_wallets': list(checked_wallets),
                'failed_wallets': [],
                'zero_balance_count': zero_balance_count,
                'api_errors': api_errors,
                'spender': spender_address,
                'token_contract': token_contract,
                'network': network['name']
            })
        raise
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ scan_allowance_reliable: {e}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if user_id:
            save_progress(user_id, {
                'session_id': session_id,
                'user_id': user_id,
                'total_wallets': total_wallets,
                'current_index': processed_count,
                'found_allowances': found_results,
                'checked_wallets': list(checked_wallets),
                'failed_wallets': [],
                'zero_balance_count': zero_balance_count,
                'api_errors': api_errors,
                'spender': spender_address,
                'token_contract': token_contract,
                'network': network['name']
            })
        raise
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ scan_allowance_reliable: {e}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if user_id:
            save_progress(user_id, {
                'session_id': session_id,
                'user_id': user_id,
                'total_wallets': total_wallets,
                'current_index': processed_count,
                'found_allowances': found_results,
                'checked_wallets': list(checked_wallets),
                'failed_wallets': [],
                'zero_balance_count': zero_balance_count,
                'api_errors': api_errors,
                'spender': spender_address,
                'token_contract': token_contract,
                'network': network['name']
            })
        raise                        

@dp.message(Command("save_results"))
async def save_results_command(message: types.Message):
    """–°—Ä–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    results_found = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º current_allowance_data
    user_data = current_allowance_data.get(message.from_user.id, {})
    if user_data.get('last_results'):
        results = user_data['last_results']
        await export_and_send_results(message, results, "recovered", [])
        results_found = True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º contract_analysis_results
    user_sessions_list = [
        sid for sid in contract_analysis_results.keys() 
        if sid.startswith(str(message.from_user.id))
    ]
    
    if user_sessions_list and not results_found:
        last_session = user_sessions_list[-1]
        session_data = contract_analysis_results[last_session]
        wallets = session_data.get('wallets', [])
        
        if wallets:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–æ—à–µ–ª—å–∫–æ–≤
            fake_results = [{'address': w, 'allowance': 0, 'balance': 0, 'available': 0, 'network': 'Base', 'rank': i+1} 
                          for i, w in enumerate(wallets)]
            
            txt_file = await export_wallets_to_txt(wallets, "recovered_wallets")
            if txt_file:
                await message.answer_document(
                    types.BufferedInputFile(
                        txt_file.getvalue(),
                        filename=f"recovered_wallets_{datetime.now().strftime('%Y%m%d_%H%M')}.txt"
                    ),
                    caption=f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(wallets)} –∫–æ—à–µ–ª—å–∫–æ–≤ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–µ—Å—Å–∏–∏"
                )
                results_found = True
    
    if not results_found:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–∞–º—è—Ç–∏")



# ========== –ê–í–ê–†–ò–ô–ù–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ==========

@dp.message(Command("emergency_export"))
async def emergency_export(message: types.Message):
    """–ê–≤–∞—Ä–∏–π–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç - —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –ø—Ä–∏–º–µ—Ä–æ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    sample_results = []
    for i in range(124):
        sample_results.append({
            'address': f'0x{"{:040x}".format(i)}',  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
            'allowance': 1000.0 + i * 10,
            'balance': 500.0 + i * 5,
            'available': 500.0 + i * 5,
            'network': 'Base',
            'rank': i + 1
        })
    
    excel_file = await export_to_excel(sample_results, "emergency_export")
    
    if excel_file:
        await message.answer_document(
            types.BufferedInputFile(
                excel_file.getvalue(),
                filename="EMERGENCY_allowance_results_template.xlsx"
            ),
            caption="‚ö†Ô∏è –®–ê–ë–õ–û–ù –î–õ–Ø –†–£–ß–ù–û–ì–û –ó–ê–ü–û–õ–ù–ï–ù–ò–Ø\n\n"
                   "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                   "‚Ä¢ ‚úÖ –ù–∞–π–¥–µ–Ω–æ: 124 –∫–æ—à–µ–ª—å–∫–∞\n"
                   "‚Ä¢ üí∏ –ù—É–ª–µ–≤—ã—Ö: 513\n"
                   "‚Ä¢ üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: 1224\n\n"
                   "üí° –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"
        )
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ä–∏–π–Ω—ã–π —Ñ–∞–π–ª")

#–§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê –ü–†–û–í–ï–†–ö–ò

async def start_allowance_check(user_id, network_choice, message=None):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É allowance —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    try:
        user_data = current_allowance_data.get(user_id, {})
        wallets = user_data.get('wallets', [])
        token_type = user_data.get('token_type', 'usdc')
        spender_address = user_data.get('spender')
        progress_data = user_data.get('progress_data')  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        
        if not wallets or not spender_address:
            if message:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return
        
        token_contract = USDC_CONTRACT_BASE if token_type == 'usdc' else ETH_CONTRACT
        
        if message:
            progress_msg = await message.answer("üõ°Ô∏è –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ allowance...")
        else:
            progress_msg = None
        
        async def progress_callback(text, progress):
            if progress_msg:
                try:
                    progress_bar = "‚ñà" * (progress // 10) + "‚ñë" * (10 - progress // 10)
                    await progress_msg.edit_text(f"{text}\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {progress}%")
                except Exception:
                    pass
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if network_choice == 'all':
            all_results = []
            for network in NETWORK_PRIORITY:
                await progress_callback(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ {network['name']}...", 0)
                network_results = await scan_allowance_reliable(
                    wallets, token_contract, spender_address, network, progress_callback, 
                    user_id=user_id, progress_data=progress_data  # ‚Üê –ü–ï–†–ï–î–ê–ï–ú –ü–†–û–ì–†–ï–°–°
                )
                all_results.extend(network_results)
        else:
            network = next((n for n in NETWORK_PRIORITY if n['name'].lower() == network_choice), None)
            if network:
                # –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
                all_results = await scan_allowance_reliable(
                    wallets, token_contract, spender_address, network, progress_callback, 
                    user_id=user_id, progress_data=progress_data  # ‚Üê –ü–ï–†–ï–î–ê–ï–ú –ü–†–û–ì–†–ï–°–°
                )   
            else:
                if message:
                    await message.answer("‚ùå –°–µ—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
        
        # üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢
        if all_results:
            result_text = (
                f"üòà **–ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê**\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"‚Ä¢ üëõ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–æ—à–µ–ª—å–∫–æ–≤: {len(wallets):,}\n"
                f"‚Ä¢ ‚úÖ –ù–∞–π–¥–µ–Ω–æ allowance: {len(all_results):,}\n"
                f"‚Ä¢ üí∏ –ù—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å: {len(wallets) - len(all_results):,}\n"
            )
            
            # –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            excel_file = await export_to_excel(all_results, f"allowance_{network_choice}")
            csv_file = await export_to_csv(all_results, f"allowance_{network_choice}")
            
            if excel_file:
                await message.answer_document(
                    types.BufferedInputFile(
                        excel_file.getvalue(),
                        filename=f"allowance_results_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx"
                    ),
                    caption=result_text,
                    parse_mode="Markdown"
                )
            elif csv_file:
                await message.answer_document(
                    types.BufferedInputFile(
                        csv_file.getvalue(),
                        filename=f"allowance_results_{datetime.now().strftime('%Y%m%d_%H%M')}.csv"
                    ),
                    caption=result_text,
                    parse_mode="Markdown"
                )
            else:
                await message.answer(result_text, parse_mode="Markdown")
                
        else:
            await message.answer(
                f"‚ùå **ALLOWANCE –ù–ï –ù–ê–ô–î–ï–ù**\n\n"
                f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(wallets):,} –∫–æ—à–µ–ª—å–∫–æ–≤\n"
                f"Spender: `{spender_address}`\n"
                f"–¢–æ–∫–µ–Ω: {token_type.upper()}\n"
                f"–°–µ—Ç—å: {network_choice.title()}"
            )
        
    except Exception as e:
        logger.error(f"‚ùå Allowance check error: {e}")
        if message:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}")        
        
# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========

async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ Render...")
    asyncio.run(main())